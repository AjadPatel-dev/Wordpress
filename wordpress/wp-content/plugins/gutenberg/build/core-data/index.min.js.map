{"version":3,"file":"./build/core-data/index.min.js","mappings":"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","sources":["webpack://wp/./node_modules/equivalent-key-map/equivalent-key-map.js","webpack://wp/./node_modules/memize/index.js","webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/compat get default export","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"data\"]","webpack://wp/external window \"lodash\"","webpack://wp/external window [\"wp\",\"isShallowEqual\"]","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/if-matching-action.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/replace-action.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/conservative-map-item.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/on-sub-key.js","webpack://wp/./node_modules/tslib/tslib.es6.js","webpack://wp/./node_modules/lower-case/src/index.ts","webpack://wp/./node_modules/no-case/src/index.ts","webpack://wp/./node_modules/capital-case/src/index.ts","webpack://wp/./node_modules/upper-case-first/src/index.ts","webpack://wp/./node_modules/pascal-case/src/index.ts","webpack://wp/external window [\"wp\",\"apiFetch\"]","webpack://wp/external window [\"wp\",\"i18n\"]","webpack://wp/./node_modules/uuid/dist/esm-browser/rng.js","webpack://wp/./node_modules/uuid/dist/esm-browser/regex.js","webpack://wp/./node_modules/uuid/dist/esm-browser/validate.js","webpack://wp/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://wp/./node_modules/uuid/dist/esm-browser/v4.js","webpack://wp/external window [\"wp\",\"url\"]","webpack://wp/external window [\"wp\",\"deprecated\"]","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/actions.js","webpack://wp/./packages/core-data/build-module/batch/@wordpress/core-data/src/batch/default-processor.js","webpack://wp/./packages/core-data/build-module/batch/@wordpress/core-data/src/batch/create-batch.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/name.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/actions.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/entities.ts","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/get-normalized-comma-separable.js","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/get-query-parts.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/with-weak-map-cache.js","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/reducer.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/reducer.js","webpack://wp/./node_modules/rememo/es/rememo.js","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/selectors.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/selectors.ts","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/is-raw-attribute.js","webpack://wp/./node_modules/camel-case/src/index.ts","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/forward-resolver.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/resolvers.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/utils.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/reducer.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/selectors.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/engine.js","webpack://wp/external window [\"wp\",\"element\"]","webpack://wp/external window [\"wp\",\"blocks\"]","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/entity-provider.js","webpack://wp/external window [\"wp\",\"htmlEntities\"]","webpack://wp/./packages/core-data/build-module/fetch/@wordpress/core-data/src/fetch/__experimental-fetch-link-suggestions.js","webpack://wp/./packages/core-data/build-module/fetch/@wordpress/core-data/src/fetch/__experimental-fetch-url-data.js","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/memoize.js","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/constants.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-query-select.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-entity-record.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-entity-records.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-resource-permissions.ts","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/index.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/actions.js"],"sourcesContent":["'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * Given an instance of EquivalentKeyMap, returns its internal value pair tuple\n * for a key, if one exists. The tuple members consist of the last reference\n * value for the key (used in efficient subsequent lookups) and the value\n * assigned for the key at the leaf node.\n *\n * @param {EquivalentKeyMap} instance EquivalentKeyMap instance.\n * @param {*} key                     The key for which to return value pair.\n *\n * @return {?Array} Value pair, if exists.\n */\nfunction getValuePair(instance, key) {\n  var _map = instance._map,\n      _arrayTreeMap = instance._arrayTreeMap,\n      _objectTreeMap = instance._objectTreeMap; // Map keeps a reference to the last object-like key used to set the\n  // value, which can be used to shortcut immediately to the value.\n\n  if (_map.has(key)) {\n    return _map.get(key);\n  } // Sort keys to ensure stable retrieval from tree.\n\n\n  var properties = Object.keys(key).sort(); // Tree by type to avoid conflicts on numeric object keys, empty value.\n\n  var map = Array.isArray(key) ? _arrayTreeMap : _objectTreeMap;\n\n  for (var i = 0; i < properties.length; i++) {\n    var property = properties[i];\n    map = map.get(property);\n\n    if (map === undefined) {\n      return;\n    }\n\n    var propertyValue = key[property];\n    map = map.get(propertyValue);\n\n    if (map === undefined) {\n      return;\n    }\n  }\n\n  var valuePair = map.get('_ekm_value');\n\n  if (!valuePair) {\n    return;\n  } // If reached, it implies that an object-like key was set with another\n  // reference, so delete the reference and replace with the current.\n\n\n  _map.delete(valuePair[0]);\n\n  valuePair[0] = key;\n  map.set('_ekm_value', valuePair);\n\n  _map.set(key, valuePair);\n\n  return valuePair;\n}\n/**\n * Variant of a Map object which enables lookup by equivalent (deeply equal)\n * object and array keys.\n */\n\n\nvar EquivalentKeyMap =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructs a new instance of EquivalentKeyMap.\n   *\n   * @param {Iterable.<*>} iterable Initial pair of key, value for map.\n   */\n  function EquivalentKeyMap(iterable) {\n    _classCallCheck(this, EquivalentKeyMap);\n\n    this.clear();\n\n    if (iterable instanceof EquivalentKeyMap) {\n      // Map#forEach is only means of iterating with support for IE11.\n      var iterablePairs = [];\n      iterable.forEach(function (value, key) {\n        iterablePairs.push([key, value]);\n      });\n      iterable = iterablePairs;\n    }\n\n    if (iterable != null) {\n      for (var i = 0; i < iterable.length; i++) {\n        this.set(iterable[i][0], iterable[i][1]);\n      }\n    }\n  }\n  /**\n   * Accessor property returning the number of elements.\n   *\n   * @return {number} Number of elements.\n   */\n\n\n  _createClass(EquivalentKeyMap, [{\n    key: \"set\",\n\n    /**\n     * Add or update an element with a specified key and value.\n     *\n     * @param {*} key   The key of the element to add.\n     * @param {*} value The value of the element to add.\n     *\n     * @return {EquivalentKeyMap} Map instance.\n     */\n    value: function set(key, value) {\n      // Shortcut non-object-like to set on internal Map.\n      if (key === null || _typeof(key) !== 'object') {\n        this._map.set(key, value);\n\n        return this;\n      } // Sort keys to ensure stable assignment into tree.\n\n\n      var properties = Object.keys(key).sort();\n      var valuePair = [key, value]; // Tree by type to avoid conflicts on numeric object keys, empty value.\n\n      var map = Array.isArray(key) ? this._arrayTreeMap : this._objectTreeMap;\n\n      for (var i = 0; i < properties.length; i++) {\n        var property = properties[i];\n\n        if (!map.has(property)) {\n          map.set(property, new EquivalentKeyMap());\n        }\n\n        map = map.get(property);\n        var propertyValue = key[property];\n\n        if (!map.has(propertyValue)) {\n          map.set(propertyValue, new EquivalentKeyMap());\n        }\n\n        map = map.get(propertyValue);\n      } // If an _ekm_value exists, there was already an equivalent key. Before\n      // overriding, ensure that the old key reference is removed from map to\n      // avoid memory leak of accumulating equivalent keys. This is, in a\n      // sense, a poor man's WeakMap, while still enabling iterability.\n\n\n      var previousValuePair = map.get('_ekm_value');\n\n      if (previousValuePair) {\n        this._map.delete(previousValuePair[0]);\n      }\n\n      map.set('_ekm_value', valuePair);\n\n      this._map.set(key, valuePair);\n\n      return this;\n    }\n    /**\n     * Returns a specified element.\n     *\n     * @param {*} key The key of the element to return.\n     *\n     * @return {?*} The element associated with the specified key or undefined\n     *              if the key can't be found.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      // Shortcut non-object-like to get from internal Map.\n      if (key === null || _typeof(key) !== 'object') {\n        return this._map.get(key);\n      }\n\n      var valuePair = getValuePair(this, key);\n\n      if (valuePair) {\n        return valuePair[1];\n      }\n    }\n    /**\n     * Returns a boolean indicating whether an element with the specified key\n     * exists or not.\n     *\n     * @param {*} key The key of the element to test for presence.\n     *\n     * @return {boolean} Whether an element with the specified key exists.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      if (key === null || _typeof(key) !== 'object') {\n        return this._map.has(key);\n      } // Test on the _presence_ of the pair, not its value, as even undefined\n      // can be a valid member value for a key.\n\n\n      return getValuePair(this, key) !== undefined;\n    }\n    /**\n     * Removes the specified element.\n     *\n     * @param {*} key The key of the element to remove.\n     *\n     * @return {boolean} Returns true if an element existed and has been\n     *                   removed, or false if the element does not exist.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      if (!this.has(key)) {\n        return false;\n      } // This naive implementation will leave orphaned child trees. A better\n      // implementation should traverse and remove orphans.\n\n\n      this.set(key, undefined);\n      return true;\n    }\n    /**\n     * Executes a provided function once per each key/value pair, in insertion\n     * order.\n     *\n     * @param {Function} callback Function to execute for each element.\n     * @param {*}        thisArg  Value to use as `this` when executing\n     *                            `callback`.\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      var _this = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n      this._map.forEach(function (value, key) {\n        // Unwrap value from object-like value pair.\n        if (key !== null && _typeof(key) === 'object') {\n          value = value[1];\n        }\n\n        callback.call(thisArg, value, key, _this);\n      });\n    }\n    /**\n     * Removes all elements.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._map = new Map();\n      this._arrayTreeMap = new Map();\n      this._objectTreeMap = new Map();\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._map.size;\n    }\n  }]);\n\n  return EquivalentKeyMap;\n}();\n\nmodule.exports = EquivalentKeyMap;\n","/**\n * Memize options object.\n *\n * @typedef MemizeOptions\n *\n * @property {number} [maxSize] Maximum size of the cache.\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef MemizeCacheNode\n *\n * @property {?MemizeCacheNode|undefined} [prev] Previous node.\n * @property {?MemizeCacheNode|undefined} [next] Next node.\n * @property {Array<*>}                   args   Function arguments for cache\n *                                               entry.\n * @property {*}                          val    Function result.\n */\n\n/**\n * Properties of the enhanced function for controlling cache.\n *\n * @typedef MemizeMemoizedFunction\n *\n * @property {()=>void} clear Clear the cache.\n */\n\n/**\n * Accepts a function to be memoized, and returns a new memoized function, with\n * optional options.\n *\n * @template {Function} F\n *\n * @param {F}             fn        Function to memoize.\n * @param {MemizeOptions} [options] Options object.\n *\n * @return {F & MemizeMemoizedFunction} Memoized function.\n */\nfunction memize( fn, options ) {\n\tvar size = 0;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar head;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar tail;\n\n\toptions = options || {};\n\n\tfunction memoized( /* ...args */ ) {\n\t\tvar node = head,\n\t\t\tlen = arguments.length,\n\t\t\targs, i;\n\n\t\tsearchCache: while ( node ) {\n\t\t\t// Perform a shallow equality test to confirm that whether the node\n\t\t\t// under test is a candidate for the arguments passed. Two arrays\n\t\t\t// are shallowly equal if their length matches and each entry is\n\t\t\t// strictly equal between the two sets. Avoid abstracting to a\n\t\t\t// function which could incur an arguments leaking deoptimization.\n\n\t\t\t// Check whether node arguments match arguments length\n\t\t\tif ( node.args.length !== arguments.length ) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check whether node arguments match arguments values\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( node.args[ i ] !== arguments[ i ] ) {\n\t\t\t\t\tnode = node.next;\n\t\t\t\t\tcontinue searchCache;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif ( node !== head ) {\n\t\t\t\t// As tail, shift to previous. Must only shift if not also\n\t\t\t\t// head, since if both head and tail, there is no previous.\n\t\t\t\tif ( node === tail ) {\n\t\t\t\t\ttail = node.prev;\n\t\t\t\t}\n\n\t\t\t\t// Adjust siblings to point to each other. If node was tail,\n\t\t\t\t// this also handles new tail's empty `next` assignment.\n\t\t\t\t/** @type {MemizeCacheNode} */ ( node.prev ).next = node.next;\n\t\t\t\tif ( node.next ) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {MemizeCacheNode} */ ( head ).prev = node;\n\t\t\t\thead = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\t// Create a copy of arguments (avoid leaking deoptimization)\n\t\targs = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tnode = {\n\t\t\targs: args,\n\n\t\t\t// Generate the result from original function\n\t\t\tval: fn.apply( null, args ),\n\t\t};\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif ( head ) {\n\t\t\thead.prev = node;\n\t\t\tnode.next = head;\n\t\t} else {\n\t\t\t// If no head, follows that there's no tail (at initial or reset)\n\t\t\ttail = node;\n\t\t}\n\n\t\t// Trim tail if we're reached max size and are pending cache insertion\n\t\tif ( size === /** @type {MemizeOptions} */ ( options ).maxSize ) {\n\t\t\ttail = /** @type {MemizeCacheNode} */ ( tail ).prev;\n\t\t\t/** @type {MemizeCacheNode} */ ( tail ).next = null;\n\t\t} else {\n\t\t\tsize++;\n\t\t}\n\n\t\thead = node;\n\n\t\treturn node.val;\n\t}\n\n\tmemoized.clear = function() {\n\t\thead = null;\n\t\ttail = null;\n\t\tsize = 0;\n\t};\n\n\tif ( process.env.NODE_ENV === 'test' ) {\n\t\t// Cache is not exposed in the public API, but used in tests to ensure\n\t\t// expected list progression\n\t\tmemoized.getCache = function() {\n\t\t\treturn [ head, tail, size ];\n\t\t};\n\t}\n\n\t// Ignore reason: There's not a clear solution to create an intersection of\n\t// the function with additional properties, where the goal is to retain the\n\t// function signature of the incoming argument and add control properties\n\t// on the return value.\n\n\t// @ts-ignore\n\treturn memoized;\n}\n\nmodule.exports = memize;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"lodash\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"isShallowEqual\"];","/** @typedef {import('../types').AnyFunction} AnyFunction */\n\n/**\n * A higher-order reducer creator which invokes the original reducer only if\n * the dispatching action matches the given predicate, **OR** if state is\n * initializing (undefined).\n *\n * @param {AnyFunction} isMatch Function predicate for allowing reducer call.\n *\n * @return {AnyFunction} Higher-order reducer.\n */\nconst ifMatchingAction = ( isMatch ) => ( reducer ) => ( state, action ) => {\n\tif ( state === undefined || isMatch( action ) ) {\n\t\treturn reducer( state, action );\n\t}\n\n\treturn state;\n};\n\nexport default ifMatchingAction;\n","/** @typedef {import('../types').AnyFunction} AnyFunction */\n\n/**\n * Higher-order reducer creator which substitutes the action object before\n * passing to the original reducer.\n *\n * @param {AnyFunction} replacer Function mapping original action to replacement.\n *\n * @return {AnyFunction} Higher-order reducer.\n */\nconst replaceAction = ( replacer ) => ( reducer ) => ( state, action ) => {\n\treturn reducer( state, replacer( action ) );\n};\n\nexport default replaceAction;\n","/**\n * External dependencies\n */\nimport { isEqual } from 'lodash';\n\n/**\n * Given the current and next item entity record, returns the minimally \"modified\"\n * result of the next item, preferring value references from the original item\n * if equal. If all values match, the original item is returned.\n *\n * @param {Object} item     Original item.\n * @param {Object} nextItem Next item.\n *\n * @return {Object} Minimally modified merged item.\n */\nexport default function conservativeMapItem( item, nextItem ) {\n\t// Return next item in its entirety if there is no original item.\n\tif ( ! item ) {\n\t\treturn nextItem;\n\t}\n\n\tlet hasChanges = false;\n\tconst result = {};\n\tfor ( const key in nextItem ) {\n\t\tif ( isEqual( item[ key ], nextItem[ key ] ) ) {\n\t\t\tresult[ key ] = item[ key ];\n\t\t} else {\n\t\t\thasChanges = true;\n\t\t\tresult[ key ] = nextItem[ key ];\n\t\t}\n\t}\n\n\tif ( ! hasChanges ) {\n\t\treturn item;\n\t}\n\n\t// Only at this point, backfill properties from the original item which\n\t// weren't explicitly set into the result above. This is an optimization\n\t// to allow `hasChanges` to return early.\n\tfor ( const key in item ) {\n\t\tif ( ! result.hasOwnProperty( key ) ) {\n\t\t\tresult[ key ] = item[ key ];\n\t\t}\n\t}\n\n\treturn result;\n}\n","/** @typedef {import('../types').AnyFunction} AnyFunction */\n\n/**\n * Higher-order reducer creator which creates a combined reducer object, keyed\n * by a property on the action object.\n *\n * @param {string} actionProperty Action property by which to key object.\n *\n * @return {AnyFunction} Higher-order reducer.\n */\nexport const onSubKey =\n\t( actionProperty ) =>\n\t( reducer ) =>\n\t( state = {}, action ) => {\n\t\t// Retrieve subkey from action. Do not track if undefined; useful for cases\n\t\t// where reducer is scoped by action shape.\n\t\tconst key = action[ actionProperty ];\n\t\tif ( key === undefined ) {\n\t\t\treturn state;\n\t\t}\n\n\t\t// Avoid updating state if unchanged. Note that this also accounts for a\n\t\t// reducer which returns undefined on a key which is not yet tracked.\n\t\tconst nextKeyState = reducer( state[ key ], action );\n\t\tif ( nextKeyState === state[ key ] ) {\n\t\t\treturn state;\n\t\t}\n\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ key ]: nextKeyState,\n\t\t};\n\t};\n\nexport default onSubKey;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  az: {\n    regexp: /\\u0130/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  lt: {\n    regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n    map: {\n      I: \"\\u0069\\u0307\",\n      J: \"\\u006A\\u0307\",\n      Į: \"\\u012F\\u0307\",\n      Ì: \"\\u0069\\u0307\\u0300\",\n      Í: \"\\u0069\\u0307\\u0301\",\n      Ĩ: \"\\u0069\\u0307\\u0303\",\n    },\n  },\n};\n\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return lowerCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return lowerCase(str);\n}\n\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str: string) {\n  return str.toLowerCase();\n}\n","import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n","import { noCase, Options } from \"no-case\";\nimport { upperCaseFirst } from \"upper-case-first\";\n\nexport { Options };\n\nexport function capitalCaseTransform(input: string) {\n  return upperCaseFirst(input.toLowerCase());\n}\n\nexport function capitalCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \" \",\n    transform: capitalCaseTransform,\n    ...options,\n  });\n}\n","/**\n * Upper case the first character of an input string.\n */\nexport function upperCaseFirst(input: string) {\n  return input.charAt(0).toUpperCase() + input.substr(1);\n}\n","import { noCase, Options } from \"no-case\";\n\nexport { Options };\n\nexport function pascalCaseTransform(input: string, index: number) {\n  const firstChar = input.charAt(0);\n  const lowerChars = input.substr(1).toLowerCase();\n  if (index > 0 && firstChar >= \"0\" && firstChar <= \"9\") {\n    return `_${firstChar}${lowerChars}`;\n  }\n  return `${firstChar.toUpperCase()}${lowerChars}`;\n}\n\nexport function pascalCaseTransformMerge(input: string) {\n  return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n}\n\nexport function pascalCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \"\",\n    transform: pascalCaseTransform,\n    ...options,\n  });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"apiFetch\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"url\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"deprecated\"];","/**\n * External dependencies\n */\nimport { castArray } from 'lodash';\n\n/**\n * Returns an action object used in signalling that items have been received.\n *\n * @param {Array}   items Items received.\n * @param {?Object} edits Optional edits to reset.\n *\n * @return {Object} Action object.\n */\nexport function receiveItems( items, edits ) {\n\treturn {\n\t\ttype: 'RECEIVE_ITEMS',\n\t\titems: castArray( items ),\n\t\tpersistedEdits: edits,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that entity records have been\n * deleted and they need to be removed from entities state.\n *\n * @param {string}              kind            Kind of the removed entities.\n * @param {string}              name            Name of the removed entities.\n * @param {Array|number|string} records         Record IDs of the removed entities.\n * @param {boolean}             invalidateCache Controls whether we want to invalidate the cache.\n * @return {Object} Action object.\n */\nexport function removeItems( kind, name, records, invalidateCache = false ) {\n\treturn {\n\t\ttype: 'REMOVE_ITEMS',\n\t\titemIds: castArray( records ),\n\t\tkind,\n\t\tname,\n\t\tinvalidateCache,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that queried data has been\n * received.\n *\n * @param {Array}   items Queried items received.\n * @param {?Object} query Optional query object.\n * @param {?Object} edits Optional edits to reset.\n *\n * @return {Object} Action object.\n */\nexport function receiveQueriedItems( items, query = {}, edits ) {\n\treturn {\n\t\t...receiveItems( items, edits ),\n\t\tquery,\n\t};\n}\n","/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Maximum number of requests to place in a single batch request. Obtained by\n * sending a preflight OPTIONS request to /batch/v1/.\n *\n * @type {number?}\n */\nlet maxItems = null;\n\nfunction chunk( arr, chunkSize ) {\n\tconst tmp = [ ...arr ];\n\tconst cache = [];\n\twhile ( tmp.length ) {\n\t\tcache.push( tmp.splice( 0, chunkSize ) );\n\t}\n\n\treturn cache;\n}\n\n/**\n * Default batch processor. Sends its input requests to /batch/v1.\n *\n * @param {Array} requests List of API requests to perform at once.\n *\n * @return {Promise} Promise that resolves to a list of objects containing\n *                   either `output` (if that request was succesful) or `error`\n *                   (if not ).\n */\nexport default async function defaultProcessor( requests ) {\n\tif ( maxItems === null ) {\n\t\tconst preflightResponse = await apiFetch( {\n\t\t\tpath: '/batch/v1',\n\t\t\tmethod: 'OPTIONS',\n\t\t} );\n\t\tmaxItems = preflightResponse.endpoints[ 0 ].args.requests.maxItems;\n\t}\n\n\tconst results = [];\n\n\t// @ts-ignore We would have crashed or never gotten to this point if we hadn't received the maxItems count.\n\tfor ( const batchRequests of chunk( requests, maxItems ) ) {\n\t\tconst batchResponse = await apiFetch( {\n\t\t\tpath: '/batch/v1',\n\t\t\tmethod: 'POST',\n\t\t\tdata: {\n\t\t\t\tvalidation: 'require-all-validate',\n\t\t\t\trequests: batchRequests.map( ( request ) => ( {\n\t\t\t\t\tpath: request.path,\n\t\t\t\t\tbody: request.data, // Rename 'data' to 'body'.\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\theaders: request.headers,\n\t\t\t\t} ) ),\n\t\t\t},\n\t\t} );\n\n\t\tlet batchResults;\n\n\t\tif ( batchResponse.failed ) {\n\t\t\tbatchResults = batchResponse.responses.map( ( response ) => ( {\n\t\t\t\terror: response?.body,\n\t\t\t} ) );\n\t\t} else {\n\t\t\tbatchResults = batchResponse.responses.map( ( response ) => {\n\t\t\t\tconst result = {};\n\t\t\t\tif ( response.status >= 200 && response.status < 300 ) {\n\t\t\t\t\tresult.output = response.body;\n\t\t\t\t} else {\n\t\t\t\t\tresult.error = response.body;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} );\n\t\t}\n\n\t\tresults.push( ...batchResults );\n\t}\n\n\treturn results;\n}\n","/**\n * Internal dependencies\n */\nimport defaultProcessor from './default-processor';\n\n/**\n * Creates a batch, which can be used to combine multiple API requests into one\n * API request using the WordPress batch processing API (/v1/batch).\n *\n * ```\n * const batch = createBatch();\n * const dunePromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Dune' }\n * } );\n * const lotrPromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Lord of the Rings' }\n * } );\n * const isSuccess = await batch.run(); // Sends one POST to /v1/batch.\n * if ( isSuccess ) {\n *   console.log(\n *     'Saved two books:',\n *     await dunePromise,\n *     await lotrPromise\n *   );\n * }\n * ```\n *\n * @param {Function} [processor] Processor function. Can be used to replace the\n *                               default functionality which is to send an API\n *                               request to /v1/batch. Is given an array of\n *                               inputs and must return a promise that\n *                               resolves to an array of objects containing\n *                               either `output` or `error`.\n */\nexport default function createBatch( processor = defaultProcessor ) {\n\tlet lastId = 0;\n\t/** @type {Array<{ input: any; resolve: ( value: any ) => void; reject: ( error: any ) => void }>} */\n\tlet queue = [];\n\tconst pending = new ObservableSet();\n\n\treturn {\n\t\t/**\n\t\t * Adds an input to the batch and returns a promise that is resolved or\n\t\t * rejected when the input is processed by `batch.run()`.\n\t\t *\n\t\t * You may also pass a thunk which allows inputs to be added\n\t\t * asychronously.\n\t\t *\n\t\t * ```\n\t\t * // Both are allowed:\n\t\t * batch.add( { path: '/v1/books', ... } );\n\t\t * batch.add( ( add ) => add( { path: '/v1/books', ... } ) );\n\t\t * ```\n\t\t *\n\t\t * If a thunk is passed, `batch.run()` will pause until either:\n\t\t *\n\t\t * - The thunk calls its `add` argument, or;\n\t\t * - The thunk returns a promise and that promise resolves, or;\n\t\t * - The thunk returns a non-promise.\n\t\t *\n\t\t * @param {any|Function} inputOrThunk Input to add or thunk to execute.\n\t\t *\n\t\t * @return {Promise|any} If given an input, returns a promise that\n\t\t *                       is resolved or rejected when the batch is\n\t\t *                       processed. If given a thunk, returns the return\n\t\t *                       value of that thunk.\n\t\t */\n\t\tadd( inputOrThunk ) {\n\t\t\tconst id = ++lastId;\n\t\t\tpending.add( id );\n\n\t\t\tconst add = ( input ) =>\n\t\t\t\tnew Promise( ( resolve, reject ) => {\n\t\t\t\t\tqueue.push( {\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tresolve,\n\t\t\t\t\t\treject,\n\t\t\t\t\t} );\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\n\t\t\tif ( typeof inputOrThunk === 'function' ) {\n\t\t\t\treturn Promise.resolve( inputOrThunk( add ) ).finally( () => {\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn add( inputOrThunk );\n\t\t},\n\n\t\t/**\n\t\t * Runs the batch. This calls `batchProcessor` and resolves or rejects\n\t\t * all promises returned by `add()`.\n\t\t *\n\t\t * @return {Promise<boolean>} A promise that resolves to a boolean that is true\n\t\t *                   if the processor returned no errors.\n\t\t */\n\t\tasync run() {\n\t\t\tif ( pending.size ) {\n\t\t\t\tawait new Promise( ( resolve ) => {\n\t\t\t\t\tconst unsubscribe = pending.subscribe( () => {\n\t\t\t\t\t\tif ( ! pending.size ) {\n\t\t\t\t\t\t\tunsubscribe();\n\t\t\t\t\t\t\tresolve( undefined );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tlet results;\n\n\t\t\ttry {\n\t\t\t\tresults = await processor(\n\t\t\t\t\tqueue.map( ( { input } ) => input )\n\t\t\t\t);\n\n\t\t\t\tif ( results.length !== queue.length ) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'run: Array returned by processor must be same size as input array.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch ( error ) {\n\t\t\t\tfor ( const { reject } of queue ) {\n\t\t\t\t\treject( error );\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tlet isSuccess = true;\n\n\t\t\tresults.forEach( ( result, key ) => {\n\t\t\t\tconst queueItem = queue[ key ];\n\n\t\t\t\tif ( result?.error ) {\n\t\t\t\t\tqueueItem?.reject( result.error );\n\t\t\t\t\tisSuccess = false;\n\t\t\t\t} else {\n\t\t\t\t\tqueueItem?.resolve( result?.output ?? result );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tqueue = [];\n\n\t\t\treturn isSuccess;\n\t\t},\n\t};\n}\n\nclass ObservableSet {\n\tconstructor( ...args ) {\n\t\tthis.set = new Set( ...args );\n\t\tthis.subscribers = new Set();\n\t}\n\n\tget size() {\n\t\treturn this.set.size;\n\t}\n\n\tadd( value ) {\n\t\tthis.set.add( value );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn this;\n\t}\n\n\tdelete( value ) {\n\t\tconst isSuccess = this.set.delete( value );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn isSuccess;\n\t}\n\n\tsubscribe( subscriber ) {\n\t\tthis.subscribers.add( subscriber );\n\t\treturn () => {\n\t\t\tthis.subscribers.delete( subscriber );\n\t\t};\n\t}\n}\n","/**\n * The reducer key used by core data in store registration.\n * This is defined in a separate file to avoid cycle-dependency\n *\n * @type {string}\n */\nexport const STORE_NAME = 'core';\n","/**\n * External dependencies\n */\nimport { castArray, isEqual, find } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { receiveItems, removeItems, receiveQueriedItems } from './queried-data';\nimport { getOrLoadEntitiesConfig, DEFAULT_ENTITY_KEY } from './entities';\nimport { createBatch } from './batch';\nimport { STORE_NAME } from './name';\n\n/**\n * Returns an action object used in signalling that authors have been received.\n * Ignored from documentation as it's internal to the data store.\n *\n * @ignore\n *\n * @param {string}       queryID Query ID.\n * @param {Array|Object} users   Users received.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserQuery( queryID, users ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_QUERY',\n\t\tusers: castArray( users ),\n\t\tqueryID,\n\t};\n}\n\n/**\n * Returns an action used in signalling that the current user has been received.\n * Ignored from documentation as it's internal to the data store.\n *\n * @ignore\n *\n * @param {Object} currentUser Current user object.\n *\n * @return {Object} Action object.\n */\nexport function receiveCurrentUser( currentUser ) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_USER',\n\t\tcurrentUser,\n\t};\n}\n\n/**\n * Returns an action object used in adding new entities.\n *\n * @param {Array} entities Entities received.\n *\n * @return {Object} Action object.\n */\nexport function addEntities( entities ) {\n\treturn {\n\t\ttype: 'ADD_ENTITIES',\n\t\tentities,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that entity records have been received.\n *\n * @param {string}       kind            Kind of the received entity record.\n * @param {string}       name            Name of the received entity record.\n * @param {Array|Object} records         Records received.\n * @param {?Object}      query           Query Object.\n * @param {?boolean}     invalidateCache Should invalidate query caches.\n * @param {?Object}      edits           Edits to reset.\n * @return {Object} Action object.\n */\nexport function receiveEntityRecords(\n\tkind,\n\tname,\n\trecords,\n\tquery,\n\tinvalidateCache = false,\n\tedits\n) {\n\t// Auto drafts should not have titles, but some plugins rely on them so we can't filter this\n\t// on the server.\n\tif ( kind === 'postType' ) {\n\t\trecords = castArray( records ).map( ( record ) =>\n\t\t\trecord.status === 'auto-draft' ? { ...record, title: '' } : record\n\t\t);\n\t}\n\tlet action;\n\tif ( query ) {\n\t\taction = receiveQueriedItems( records, query, edits );\n\t} else {\n\t\taction = receiveItems( records, edits );\n\t}\n\n\treturn {\n\t\t...action,\n\t\tkind,\n\t\tname,\n\t\tinvalidateCache,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current theme has been received.\n * Ignored from documentation as it's internal to the data store.\n *\n * @ignore\n *\n * @param {Object} currentTheme The current theme.\n *\n * @return {Object} Action object.\n */\nexport function receiveCurrentTheme( currentTheme ) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_THEME',\n\t\tcurrentTheme,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current global styles id has been received.\n * Ignored from documentation as it's internal to the data store.\n *\n * @ignore\n *\n * @param {string} currentGlobalStylesId The current global styles id.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveCurrentGlobalStylesId(\n\tcurrentGlobalStylesId\n) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_GLOBAL_STYLES_ID',\n\t\tid: currentGlobalStylesId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the theme base global styles have been received\n * Ignored from documentation as it's internal to the data store.\n *\n * @ignore\n *\n * @param {string} stylesheet   The theme's identifier\n * @param {Object} globalStyles The global styles object.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveThemeBaseGlobalStyles(\n\tstylesheet,\n\tglobalStyles\n) {\n\treturn {\n\t\ttype: 'RECEIVE_THEME_GLOBAL_STYLES',\n\t\tstylesheet,\n\t\tglobalStyles,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the theme global styles variations have been received.\n * Ignored from documentation as it's internal to the data store.\n *\n * @ignore\n *\n * @param {string} stylesheet The theme's identifier\n * @param {Array}  variations The global styles variations.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveThemeGlobalStyleVariations(\n\tstylesheet,\n\tvariations\n) {\n\treturn {\n\t\ttype: 'RECEIVE_THEME_GLOBAL_STYLE_VARIATIONS',\n\t\tstylesheet,\n\t\tvariations,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the index has been received.\n *\n * @deprecated since WP 5.9, this is not useful anymore, use the selector direclty.\n *\n * @return {Object} Action object.\n */\nexport function receiveThemeSupports() {\n\tdeprecated( \"wp.data.dispatch( 'core' ).receiveThemeSupports\", {\n\t\tsince: '5.9',\n\t} );\n\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the preview data for\n * a given URl has been received.\n * Ignored from documentation as it's internal to the data store.\n *\n * @ignore\n *\n * @param {string} url     URL to preview the embed for.\n * @param {*}      preview Preview data.\n *\n * @return {Object} Action object.\n */\nexport function receiveEmbedPreview( url, preview ) {\n\treturn {\n\t\ttype: 'RECEIVE_EMBED_PREVIEW',\n\t\turl,\n\t\tpreview,\n\t};\n}\n\n/**\n * Action triggered to delete an entity record.\n *\n * @param {string}   kind                         Kind of the deleted entity.\n * @param {string}   name                         Name of the deleted entity.\n * @param {string}   recordId                     Record ID of the deleted entity.\n * @param {?Object}  query                        Special query parameters for the\n *                                                DELETE API call.\n * @param {Object}   [options]                    Delete options.\n * @param {Function} [options.__unstableFetch]    Internal use only. Function to\n *                                                call instead of `apiFetch()`.\n *                                                Must return a promise.\n * @param {boolean}  [options.throwOnError=false] If false, this action suppresses all\n *                                                the exceptions. Defaults to false.\n */\nexport const deleteEntityRecord =\n\t(\n\t\tkind,\n\t\tname,\n\t\trecordId,\n\t\tquery,\n\t\t{ __unstableFetch = apiFetch, throwOnError = false } = {}\n\t) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = find( configs, { kind, name } );\n\t\tlet error;\n\t\tlet deletedRecord = false;\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name, recordId ],\n\t\t\t{ exclusive: true }\n\t\t);\n\n\t\ttry {\n\t\t\tdispatch( {\n\t\t\t\ttype: 'DELETE_ENTITY_RECORD_START',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId,\n\t\t\t} );\n\n\t\t\tlet hasError = false;\n\t\t\ttry {\n\t\t\t\tlet path = `${ entityConfig.baseURL }/${ recordId }`;\n\n\t\t\t\tif ( query ) {\n\t\t\t\t\tpath = addQueryArgs( path, query );\n\t\t\t\t}\n\n\t\t\t\tdeletedRecord = await __unstableFetch( {\n\t\t\t\t\tpath,\n\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t} );\n\n\t\t\t\tawait dispatch( removeItems( kind, name, recordId, true ) );\n\t\t\t} catch ( _error ) {\n\t\t\t\thasError = true;\n\t\t\t\terror = _error;\n\t\t\t}\n\n\t\t\tdispatch( {\n\t\t\t\ttype: 'DELETE_ENTITY_RECORD_FINISH',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId,\n\t\t\t\terror,\n\t\t\t} );\n\n\t\t\tif ( hasError && throwOnError ) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\treturn deletedRecord;\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\n/**\n * Returns an action object that triggers an\n * edit to an entity record.\n *\n * @param {string}  kind                 Kind of the edited entity record.\n * @param {string}  name                 Name of the edited entity record.\n * @param {number}  recordId             Record ID of the edited entity record.\n * @param {Object}  edits                The edits.\n * @param {Object}  options              Options for the edit.\n * @param {boolean} [options.undoIgnore] Whether to ignore the edit in undo history or not.\n *\n * @return {Object} Action object.\n */\nexport const editEntityRecord =\n\t( kind, name, recordId, edits, options = {} ) =>\n\t( { select, dispatch } ) => {\n\t\tconst entityConfig = select.getEntityConfig( kind, name );\n\t\tif ( ! entityConfig ) {\n\t\t\tthrow new Error(\n\t\t\t\t`The entity being edited (${ kind }, ${ name }) does not have a loaded config.`\n\t\t\t);\n\t\t}\n\t\tconst { transientEdits = {}, mergedEdits = {} } = entityConfig;\n\t\tconst record = select.getRawEntityRecord( kind, name, recordId );\n\t\tconst editedRecord = select.getEditedEntityRecord(\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId\n\t\t);\n\n\t\tconst edit = {\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t\t// Clear edits when they are equal to their persisted counterparts\n\t\t\t// so that the property is not considered dirty.\n\t\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\t\tconst recordValue = record[ key ];\n\t\t\t\tconst editedRecordValue = editedRecord[ key ];\n\t\t\t\tconst value = mergedEdits[ key ]\n\t\t\t\t\t? { ...editedRecordValue, ...edits[ key ] }\n\t\t\t\t\t: edits[ key ];\n\t\t\t\tacc[ key ] = isEqual( recordValue, value ) ? undefined : value;\n\t\t\t\treturn acc;\n\t\t\t}, {} ),\n\t\t\ttransientEdits,\n\t\t};\n\t\tdispatch( {\n\t\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t\t...edit,\n\t\t\tmeta: {\n\t\t\t\tundo: ! options.undoIgnore && {\n\t\t\t\t\t...edit,\n\t\t\t\t\t// Send the current values for things like the first undo stack entry.\n\t\t\t\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\t\t\t\tacc[ key ] = editedRecord[ key ];\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t},\n\t\t} );\n\t};\n\n/**\n * Action triggered to undo the last edit to\n * an entity record, if any.\n */\nexport const undo =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\tconst undoEdit = select.getUndoEdit();\n\t\tif ( ! undoEdit ) {\n\t\t\treturn;\n\t\t}\n\t\tdispatch( {\n\t\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t\t...undoEdit,\n\t\t\tmeta: { isUndo: true },\n\t\t} );\n\t};\n\n/**\n * Action triggered to redo the last undoed\n * edit to an entity record, if any.\n */\nexport const redo =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\tconst redoEdit = select.getRedoEdit();\n\t\tif ( ! redoEdit ) {\n\t\t\treturn;\n\t\t}\n\t\tdispatch( {\n\t\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t\t...redoEdit,\n\t\t\tmeta: { isRedo: true },\n\t\t} );\n\t};\n\n/**\n * Forces the creation of a new undo level.\n *\n * @return {Object} Action object.\n */\nexport function __unstableCreateUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Action triggered to save an entity record.\n *\n * @param {string}   kind                         Kind of the received entity.\n * @param {string}   name                         Name of the received entity.\n * @param {Object}   record                       Record to be saved.\n * @param {Object}   options                      Saving options.\n * @param {boolean}  [options.isAutosave=false]   Whether this is an autosave.\n * @param {Function} [options.__unstableFetch]    Internal use only. Function to\n *                                                call instead of `apiFetch()`.\n *                                                Must return a promise.\n * @param {boolean}  [options.throwOnError=false] If false, this action suppresses all\n *                                                the exceptions. Defaults to false.\n */\nexport const saveEntityRecord =\n\t(\n\t\tkind,\n\t\tname,\n\t\trecord,\n\t\t{\n\t\t\tisAutosave = false,\n\t\t\t__unstableFetch = apiFetch,\n\t\t\tthrowOnError = false,\n\t\t} = {}\n\t) =>\n\tasync ( { select, resolveSelect, dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = find( configs, { kind, name } );\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\t\tconst entityIdKey = entityConfig.key || DEFAULT_ENTITY_KEY;\n\t\tconst recordId = record[ entityIdKey ];\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name, recordId || uuid() ],\n\t\t\t{ exclusive: true }\n\t\t);\n\n\t\ttry {\n\t\t\t// Evaluate optimized edits.\n\t\t\t// (Function edits that should be evaluated on save to avoid expensive computations on every edit.)\n\t\t\tfor ( const [ key, value ] of Object.entries( record ) ) {\n\t\t\t\tif ( typeof value === 'function' ) {\n\t\t\t\t\tconst evaluatedValue = value(\n\t\t\t\t\t\tselect.getEditedEntityRecord( kind, name, recordId )\n\t\t\t\t\t);\n\t\t\t\t\tdispatch.editEntityRecord(\n\t\t\t\t\t\tkind,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\trecordId,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[ key ]: evaluatedValue,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ undoIgnore: true }\n\t\t\t\t\t);\n\t\t\t\t\trecord[ key ] = evaluatedValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdispatch( {\n\t\t\t\ttype: 'SAVE_ENTITY_RECORD_START',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId,\n\t\t\t\tisAutosave,\n\t\t\t} );\n\t\t\tlet updatedRecord;\n\t\t\tlet error;\n\t\t\tlet hasError = false;\n\t\t\ttry {\n\t\t\t\tconst path = `${ entityConfig.baseURL }${\n\t\t\t\t\trecordId ? '/' + recordId : ''\n\t\t\t\t}`;\n\t\t\t\tconst persistedRecord = select.getRawEntityRecord(\n\t\t\t\t\tkind,\n\t\t\t\t\tname,\n\t\t\t\t\trecordId\n\t\t\t\t);\n\n\t\t\t\tif ( isAutosave ) {\n\t\t\t\t\t// Most of this autosave logic is very specific to posts.\n\t\t\t\t\t// This is fine for now as it is the only supported autosave,\n\t\t\t\t\t// but ideally this should all be handled in the back end,\n\t\t\t\t\t// so the client just sends and receives objects.\n\t\t\t\t\tconst currentUser = select.getCurrentUser();\n\t\t\t\t\tconst currentUserId = currentUser\n\t\t\t\t\t\t? currentUser.id\n\t\t\t\t\t\t: undefined;\n\t\t\t\t\tconst autosavePost = await resolveSelect.getAutosave(\n\t\t\t\t\t\tpersistedRecord.type,\n\t\t\t\t\t\tpersistedRecord.id,\n\t\t\t\t\t\tcurrentUserId\n\t\t\t\t\t);\n\t\t\t\t\t// Autosaves need all expected fields to be present.\n\t\t\t\t\t// So we fallback to the previous autosave and then\n\t\t\t\t\t// to the actual persisted entity if the edits don't\n\t\t\t\t\t// have a value.\n\t\t\t\t\tlet data = {\n\t\t\t\t\t\t...persistedRecord,\n\t\t\t\t\t\t...autosavePost,\n\t\t\t\t\t\t...record,\n\t\t\t\t\t};\n\t\t\t\t\tdata = Object.keys( data ).reduce(\n\t\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t[ 'title', 'excerpt', 'content' ].includes(\n\t\t\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tacc[ key ] = data[ key ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstatus:\n\t\t\t\t\t\t\t\tdata.status === 'auto-draft'\n\t\t\t\t\t\t\t\t\t? 'draft'\n\t\t\t\t\t\t\t\t\t: data.status,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tupdatedRecord = await __unstableFetch( {\n\t\t\t\t\t\tpath: `${ path }/autosaves`,\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tdata,\n\t\t\t\t\t} );\n\n\t\t\t\t\t// An autosave may be processed by the server as a regular save\n\t\t\t\t\t// when its update is requested by the author and the post had\n\t\t\t\t\t// draft or auto-draft status.\n\t\t\t\t\tif ( persistedRecord.id === updatedRecord.id ) {\n\t\t\t\t\t\tlet newRecord = {\n\t\t\t\t\t\t\t...persistedRecord,\n\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t...updatedRecord,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tnewRecord = Object.keys( newRecord ).reduce(\n\t\t\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\t\t\t// These properties are persisted in autosaves.\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t[ 'title', 'excerpt', 'content' ].includes(\n\t\t\t\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tacc[ key ] = newRecord[ key ];\n\t\t\t\t\t\t\t\t} else if ( key === 'status' ) {\n\t\t\t\t\t\t\t\t\t// Status is only persisted in autosaves when going from\n\t\t\t\t\t\t\t\t\t// \"auto-draft\" to \"draft\".\n\t\t\t\t\t\t\t\t\tacc[ key ] =\n\t\t\t\t\t\t\t\t\t\tpersistedRecord.status ===\n\t\t\t\t\t\t\t\t\t\t\t'auto-draft' &&\n\t\t\t\t\t\t\t\t\t\tnewRecord.status === 'draft'\n\t\t\t\t\t\t\t\t\t\t\t? newRecord.status\n\t\t\t\t\t\t\t\t\t\t\t: persistedRecord.status;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// These properties are not persisted in autosaves.\n\t\t\t\t\t\t\t\t\tacc[ key ] = persistedRecord[ key ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatch.receiveAutosaves(\n\t\t\t\t\t\t\tpersistedRecord.id,\n\t\t\t\t\t\t\tupdatedRecord\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet edits = record;\n\t\t\t\t\tif ( entityConfig.__unstablePrePersist ) {\n\t\t\t\t\t\tedits = {\n\t\t\t\t\t\t\t...edits,\n\t\t\t\t\t\t\t...entityConfig.__unstablePrePersist(\n\t\t\t\t\t\t\t\tpersistedRecord,\n\t\t\t\t\t\t\t\tedits\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tupdatedRecord = await __unstableFetch( {\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tmethod: recordId ? 'PUT' : 'POST',\n\t\t\t\t\t\tdata: edits,\n\t\t\t\t\t} );\n\t\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\t\tkind,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tupdatedRecord,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tedits\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch ( _error ) {\n\t\t\t\thasError = true;\n\t\t\t\terror = _error;\n\t\t\t}\n\t\t\tdispatch( {\n\t\t\t\ttype: 'SAVE_ENTITY_RECORD_FINISH',\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId,\n\t\t\t\terror,\n\t\t\t\tisAutosave,\n\t\t\t} );\n\n\t\t\tif ( hasError && throwOnError ) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\treturn updatedRecord;\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\n/**\n * Runs multiple core-data actions at the same time using one API request.\n *\n * Example:\n *\n * ```\n * const [ savedRecord, updatedRecord, deletedRecord ] =\n *   await dispatch( 'core' ).__experimentalBatch( [\n *     ( { saveEntityRecord } ) => saveEntityRecord( 'root', 'widget', widget ),\n *     ( { saveEditedEntityRecord } ) => saveEntityRecord( 'root', 'widget', 123 ),\n *     ( { deleteEntityRecord } ) => deleteEntityRecord( 'root', 'widget', 123, null ),\n *   ] );\n * ```\n *\n * @param {Array} requests Array of functions which are invoked simultaneously.\n *                         Each function is passed an object containing\n *                         `saveEntityRecord`, `saveEditedEntityRecord`, and\n *                         `deleteEntityRecord`.\n *\n * @return {(thunkArgs: Object) => Promise} A promise that resolves to an array containing the return\n *                                          values of each function given in `requests`.\n */\nexport const __experimentalBatch =\n\t( requests ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst batch = createBatch();\n\t\tconst api = {\n\t\t\tsaveEntityRecord( kind, name, record, options ) {\n\t\t\t\treturn batch.add( ( add ) =>\n\t\t\t\t\tdispatch.saveEntityRecord( kind, name, record, {\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t},\n\t\t\tsaveEditedEntityRecord( kind, name, recordId, options ) {\n\t\t\t\treturn batch.add( ( add ) =>\n\t\t\t\t\tdispatch.saveEditedEntityRecord( kind, name, recordId, {\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t},\n\t\t\tdeleteEntityRecord( kind, name, recordId, query, options ) {\n\t\t\t\treturn batch.add( ( add ) =>\n\t\t\t\t\tdispatch.deleteEntityRecord( kind, name, recordId, query, {\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tconst resultPromises = requests.map( ( request ) => request( api ) );\n\t\tconst [ , ...results ] = await Promise.all( [\n\t\t\tbatch.run(),\n\t\t\t...resultPromises,\n\t\t] );\n\t\treturn results;\n\t};\n\n/**\n * Action triggered to save an entity record's edits.\n *\n * @param {string} kind     Kind of the entity.\n * @param {string} name     Name of the entity.\n * @param {Object} recordId ID of the record.\n * @param {Object} options  Saving options.\n */\nexport const saveEditedEntityRecord =\n\t( kind, name, recordId, options ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tif ( ! select.hasEditsForEntityRecord( kind, name, recordId ) ) {\n\t\t\treturn;\n\t\t}\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = find( configs, { kind, name } );\n\t\tif ( ! entityConfig ) {\n\t\t\treturn;\n\t\t}\n\t\tconst entityIdKey = entityConfig.key || DEFAULT_ENTITY_KEY;\n\n\t\tconst edits = select.getEntityRecordNonTransientEdits(\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId\n\t\t);\n\t\tconst record = { [ entityIdKey ]: recordId, ...edits };\n\t\treturn await dispatch.saveEntityRecord( kind, name, record, options );\n\t};\n\n/**\n * Action triggered to save only specified properties for the entity.\n *\n * @param {string} kind        Kind of the entity.\n * @param {string} name        Name of the entity.\n * @param {Object} recordId    ID of the record.\n * @param {Array}  itemsToSave List of entity properties to save.\n * @param {Object} options     Saving options.\n */\nexport const __experimentalSaveSpecifiedEntityEdits =\n\t( kind, name, recordId, itemsToSave, options ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tif ( ! select.hasEditsForEntityRecord( kind, name, recordId ) ) {\n\t\t\treturn;\n\t\t}\n\t\tconst edits = select.getEntityRecordNonTransientEdits(\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId\n\t\t);\n\t\tconst editsToSave = {};\n\t\tfor ( const edit in edits ) {\n\t\t\tif ( itemsToSave.some( ( item ) => item === edit ) ) {\n\t\t\t\teditsToSave[ edit ] = edits[ edit ];\n\t\t\t}\n\t\t}\n\t\treturn await dispatch.saveEntityRecord(\n\t\t\tkind,\n\t\t\tname,\n\t\t\teditsToSave,\n\t\t\toptions\n\t\t);\n\t};\n\n/**\n * Returns an action object used in signalling that Upload permissions have been received.\n *\n * @deprecated since WP 5.9, use receiveUserPermission instead.\n *\n * @param {boolean} hasUploadPermissions Does the user have permission to upload files?\n *\n * @return {Object} Action object.\n */\nexport function receiveUploadPermissions( hasUploadPermissions ) {\n\tdeprecated( \"wp.data.dispatch( 'core' ).receiveUploadPermissions\", {\n\t\tsince: '5.9',\n\t\talternative: 'receiveUserPermission',\n\t} );\n\n\treturn receiveUserPermission( 'create/media', hasUploadPermissions );\n}\n\n/**\n * Returns an action object used in signalling that the current user has\n * permission to perform an action on a REST resource.\n * Ignored from documentation as it's internal to the data store.\n *\n * @ignore\n *\n * @param {string}  key       A key that represents the action and REST resource.\n * @param {boolean} isAllowed Whether or not the user can perform the action.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserPermission( key, isAllowed ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_PERMISSION',\n\t\tkey,\n\t\tisAllowed,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the autosaves for a\n * post have been received.\n * Ignored from documentation as it's internal to the data store.\n *\n * @ignore\n *\n * @param {number}       postId    The id of the post that is parent to the autosave.\n * @param {Array|Object} autosaves An array of autosaves or singular autosave object.\n *\n * @return {Object} Action object.\n */\nexport function receiveAutosaves( postId, autosaves ) {\n\treturn {\n\t\ttype: 'RECEIVE_AUTOSAVES',\n\t\tpostId,\n\t\tautosaves: castArray( autosaves ),\n\t};\n}\n","/**\n * External dependencies\n */\nimport { capitalCase, pascalCase } from 'change-case';\nimport { map, find, get } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { addEntities } from './actions';\nimport type * as Records from './entity-types';\nimport type {\n\tEntityType,\n\tContext,\n\tPost,\n\tTaxonomy,\n\tType,\n\tUpdatable,\n} from './entity-types';\n\nexport const DEFAULT_ENTITY_KEY = 'id';\n\nconst POST_RAW_ATTRIBUTES = [ 'title', 'excerpt', 'content' ];\n\ntype AttachmentEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'media';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Attachment< C >,\n\tC\n>;\n\nconst attachmentConfig: AttachmentEntity[ 'config' ] = {\n\tname: 'media',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/media',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'mediaItems',\n\tlabel: __( 'Media' ),\n\trawAttributes: [ 'caption', 'title', 'description' ],\n};\n\ntype SiteEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'site';\n\t\tkind: 'root';\n\t},\n\tRecords.Settings< C >,\n\tC\n>;\n\nconst siteConfig: SiteEntity[ 'config' ] = {\n\tlabel: __( 'Site' ),\n\tname: 'site',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/settings',\n\tgetTitle: ( record: Records.Settings< 'edit' > ) => {\n\t\treturn get( record, [ 'title' ], __( 'Site Title' ) );\n\t},\n};\n\ntype PostTypeEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'postType';\n\t\tkind: 'root';\n\t\tkey: 'slug';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Type< C >,\n\tC\n>;\n\nconst postTypeConfig: PostTypeEntity[ 'config' ] = {\n\tlabel: __( 'Post Type' ),\n\tname: 'postType',\n\tkind: 'root',\n\tkey: 'slug',\n\tbaseURL: '/wp/v2/types',\n\tbaseURLParams: { context: 'edit' },\n};\n\ntype TaxonomyEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'taxonomy';\n\t\tkind: 'root';\n\t\tkey: 'slug';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Taxonomy< C >,\n\tC\n>;\n\nconst taxonomyConfig: TaxonomyEntity[ 'config' ] = {\n\tname: 'taxonomy',\n\tkind: 'root',\n\tkey: 'slug',\n\tbaseURL: '/wp/v2/taxonomies',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'taxonomies',\n\tlabel: __( 'Taxonomy' ),\n};\n\ntype SidebarEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'sidebar';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Sidebar< C >,\n\tC\n>;\n\nconst sidebarConfig: SidebarEntity[ 'config' ] = {\n\tname: 'sidebar',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/sidebars',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'sidebars',\n\ttransientEdits: { blocks: true },\n\tlabel: __( 'Widget areas' ),\n};\n\ntype WidgetEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'widget';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Widget< C >,\n\tC\n>;\nconst widgetConfig: WidgetEntity[ 'config' ] = {\n\tname: 'widget',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/widgets',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'widgets',\n\ttransientEdits: { blocks: true },\n\tlabel: __( 'Widgets' ),\n};\n\ntype WidgetTypeEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'widgetType';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.WidgetType< C >,\n\tC\n>;\nconst widgetTypeConfig: WidgetTypeEntity[ 'config' ] = {\n\tname: 'widgetType',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/widget-types',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'widgetTypes',\n\tlabel: __( 'Widget types' ),\n};\n\ntype UserEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'user';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.User< C >,\n\tC\n>;\nconst userConfig: UserEntity[ 'config' ] = {\n\tlabel: __( 'User' ),\n\tname: 'user',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/users',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'users',\n};\n\ntype CommentEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'comment';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.Comment< C >,\n\tC\n>;\nconst commentConfig: CommentEntity[ 'config' ] = {\n\tname: 'comment',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/comments',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'comments',\n\tlabel: __( 'Comment' ),\n};\n\ntype NavMenuEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'menu';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.NavMenu< C >,\n\tC\n>;\n\nconst menuConfig: NavMenuEntity[ 'config' ] = {\n\tname: 'menu',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/menus',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'menus',\n\tlabel: __( 'Menu' ),\n};\n\ntype NavMenuItemEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'menuItem';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.NavMenuItem< C >,\n\tC\n>;\n\nconst menuItemConfig: NavMenuItemEntity[ 'config' ] = {\n\tname: 'menuItem',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/menu-items',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'menuItems',\n\tlabel: __( 'Menu Item' ),\n\trawAttributes: [ 'title' ],\n};\n\ntype MenuLocationEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'menuLocation';\n\t\tkind: 'root';\n\t\tkey: 'name';\n\t\tbaseURLParams: { context: 'edit' };\n\t},\n\tRecords.MenuLocation< C >,\n\tC\n>;\n\nconst menuLocationConfig: MenuLocationEntity[ 'config' ] = {\n\tname: 'menuLocation',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/menu-locations',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'menuLocations',\n\tlabel: __( 'Menu Location' ),\n\tkey: 'name',\n};\n\nconst globalStyleConfig = {\n\tlabel: __( 'Global Styles' ),\n\tname: 'globalStyles',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/global-styles',\n\tbaseURLParams: { context: 'edit' },\n\tplural: 'globalStylesVariations', // Should be different than name.\n\tgetTitle: ( record ) => record?.title?.rendered || record?.title,\n};\n\ntype ThemeEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'theme';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t\tkey: 'stylesheet';\n\t},\n\tRecords.Theme< C >,\n\tC\n>;\n\nconst themeConfig: ThemeEntity[ 'config' ] = {\n\tlabel: __( 'Themes' ),\n\tname: 'theme',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/themes',\n\tbaseURLParams: { context: 'edit' },\n\tkey: 'stylesheet',\n};\n\ntype PluginEntity< C extends Context = Context > = EntityType<\n\t{\n\t\tname: 'plugin';\n\t\tkind: 'root';\n\t\tbaseURLParams: { context: 'edit' };\n\t\tkey: 'plugin';\n\t},\n\tRecords.Plugin< C >,\n\tC\n>;\nconst pluginConfig: PluginEntity[ 'config' ] = {\n\tlabel: __( 'Plugins' ),\n\tname: 'plugin',\n\tkind: 'root',\n\tbaseURL: '/wp/v2/plugins',\n\tbaseURLParams: { context: 'edit' },\n\tkey: 'plugin',\n};\n\nexport const rootEntitiesConfig = [\n\t{\n\t\tlabel: __( 'Base' ),\n\t\tkind: 'root',\n\t\tname: '__unstableBase',\n\t\tbaseURL: '/',\n\t\tbaseURLParams: {\n\t\t\t_fields: [\n\t\t\t\t'description',\n\t\t\t\t'gmt_offset',\n\t\t\t\t'home',\n\t\t\t\t'name',\n\t\t\t\t'site_icon',\n\t\t\t\t'site_icon_url',\n\t\t\t\t'site_logo',\n\t\t\t\t'timezone_string',\n\t\t\t\t'url',\n\t\t\t].join( ',' ),\n\t\t},\n\t},\n\tsiteConfig,\n\tpostTypeConfig,\n\tattachmentConfig,\n\ttaxonomyConfig,\n\tsidebarConfig,\n\twidgetConfig,\n\twidgetTypeConfig,\n\tuserConfig,\n\tcommentConfig,\n\tmenuConfig,\n\tmenuItemConfig,\n\tmenuLocationConfig,\n\tglobalStyleConfig,\n\tthemeConfig,\n\tpluginConfig,\n];\n\ntype PostTypeConfig = {\n\tkind: 'postType';\n\tkey: 'id';\n\tdefaultContext: 'edit';\n};\n\ntype PostEntity< C extends Context = Context > = EntityType<\n\tPostTypeConfig & { name: 'post' },\n\tRecords.Post< C >,\n\tC\n>;\ntype PageEntity< C extends Context > = EntityType<\n\tPostTypeConfig & { name: 'page' },\n\tRecords.Page< C >,\n\tC\n>;\ntype WpTemplateEntity< C extends Context > = EntityType<\n\tPostTypeConfig & { name: 'wp_template' },\n\tRecords.WpTemplate< C >,\n\tC\n>;\ntype WpTemplatePartEntity< C extends Context > = EntityType<\n\tPostTypeConfig & { name: 'wp_template_part' },\n\tRecords.WpTemplatePart< C >,\n\tC\n>;\n\nexport type CoreEntities< C extends Context > =\n\t| SiteEntity< C >\n\t| PostTypeEntity< C >\n\t| AttachmentEntity< C >\n\t| TaxonomyEntity< C >\n\t| SidebarEntity< C >\n\t| WidgetEntity< C >\n\t| WidgetTypeEntity< C >\n\t| UserEntity< C >\n\t| CommentEntity< C >\n\t| NavMenuEntity< C >\n\t| NavMenuItemEntity< C >\n\t| MenuLocationEntity< C >\n\t| ThemeEntity< C >\n\t| PluginEntity< C >\n\t| PostEntity< C >\n\t| PageEntity< C >\n\t| WpTemplateEntity< C >\n\t| WpTemplatePartEntity< C >;\n\nexport const additionalEntityConfigLoaders = [\n\t{ kind: 'postType', loadEntities: loadPostTypeEntities },\n\t{ kind: 'taxonomy', loadEntities: loadTaxonomyEntities },\n];\n\n/**\n * Returns a function to be used to retrieve extra edits to apply before persisting a post type.\n *\n * @param {Object} persistedRecord Already persisted Post\n * @param {Object} edits           Edits.\n * @return {Object} Updated edits.\n */\nexport const prePersistPostType = ( persistedRecord, edits ) => {\n\tconst newEdits = {} as Partial< Updatable< Post< 'edit' > > >;\n\n\tif ( persistedRecord?.status === 'auto-draft' ) {\n\t\t// Saving an auto-draft should create a draft by default.\n\t\tif ( ! edits.status && ! newEdits.status ) {\n\t\t\tnewEdits.status = 'draft';\n\t\t}\n\n\t\t// Fix the auto-draft default title.\n\t\tif (\n\t\t\t( ! edits.title || edits.title === 'Auto Draft' ) &&\n\t\t\t! newEdits.title &&\n\t\t\t( ! persistedRecord?.title ||\n\t\t\t\tpersistedRecord?.title === 'Auto Draft' )\n\t\t) {\n\t\t\tnewEdits.title = '';\n\t\t}\n\t}\n\n\treturn newEdits;\n};\n\n/**\n * Returns the list of post type entities.\n *\n * @return {Promise} Entities promise\n */\nasync function loadPostTypeEntities() {\n\tconst postTypes = ( await apiFetch( {\n\t\tpath: '/wp/v2/types?context=view',\n\t} ) ) as Record< string, Type< 'view' > >;\n\treturn map( postTypes, ( postType, name ) => {\n\t\tconst isTemplate = [ 'wp_template', 'wp_template_part' ].includes(\n\t\t\tname\n\t\t);\n\t\tconst namespace = postType?.rest_namespace ?? 'wp/v2';\n\t\treturn {\n\t\t\tkind: 'postType',\n\t\t\tbaseURL: `/${ namespace }/${ postType.rest_base }`,\n\t\t\tbaseURLParams: { context: 'edit' },\n\t\t\tname,\n\t\t\tlabel: postType.name,\n\t\t\ttransientEdits: {\n\t\t\t\tblocks: true,\n\t\t\t\tselection: true,\n\t\t\t},\n\t\t\tmergedEdits: { meta: true },\n\t\t\trawAttributes: POST_RAW_ATTRIBUTES,\n\t\t\tgetTitle: ( record ) =>\n\t\t\t\trecord?.title?.rendered ||\n\t\t\t\trecord?.title ||\n\t\t\t\t( isTemplate\n\t\t\t\t\t? capitalCase( record.slug ?? '' )\n\t\t\t\t\t: String( record.id ) ),\n\t\t\t__unstablePrePersist: isTemplate ? undefined : prePersistPostType,\n\t\t\t__unstable_rest_base: postType.rest_base,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the list of the taxonomies entities.\n *\n * @return {Promise} Entities promise\n */\nasync function loadTaxonomyEntities() {\n\tconst taxonomies = ( await apiFetch( {\n\t\tpath: '/wp/v2/taxonomies?context=view',\n\t} ) ) as Record< string, Taxonomy< 'view' > >;\n\treturn map( taxonomies, ( taxonomy, name ) => {\n\t\tconst namespace = taxonomy?.rest_namespace ?? 'wp/v2';\n\t\treturn {\n\t\t\tkind: 'taxonomy',\n\t\t\tbaseURL: `/${ namespace }/${ taxonomy.rest_base }`,\n\t\t\tbaseURLParams: { context: 'edit' },\n\t\t\tname,\n\t\t\tlabel: taxonomy.name,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the entity's getter method name given its kind and name.\n *\n * @example\n * ```js\n * const nameSingular = getMethodName( 'root', 'theme', 'get' );\n * // nameSingular is getRootTheme\n *\n * const namePlural = getMethodName( 'root', 'theme', 'set' );\n * // namePlural is setRootThemes\n * ```\n *\n * @param {string}  kind      Entity kind.\n * @param {string}  name      Entity name.\n * @param {string}  prefix    Function prefix.\n * @param {boolean} usePlural Whether to use the plural form or not.\n *\n * @return {string} Method name\n */\nexport const getMethodName = (\n\tkind,\n\tname,\n\tprefix = 'get',\n\tusePlural = false\n) => {\n\tconst entityConfig = find( rootEntitiesConfig, { kind, name } );\n\tconst kindPrefix = kind === 'root' ? '' : pascalCase( kind );\n\tconst nameSuffix = pascalCase( name ) + ( usePlural ? 's' : '' );\n\tconst suffix =\n\t\tusePlural && 'plural' in entityConfig! && entityConfig?.plural\n\t\t\t? pascalCase( entityConfig.plural )\n\t\t\t: nameSuffix;\n\treturn `${ prefix }${ kindPrefix }${ suffix }`;\n};\n\n/**\n * Loads the kind entities into the store.\n *\n * @param {string} kind Kind\n *\n * @return {(thunkArgs: object) => Promise<Array>} Entities\n */\nexport const getOrLoadEntitiesConfig =\n\t( kind ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tlet configs = select.getEntitiesConfig( kind );\n\t\tif ( configs && configs.length !== 0 ) {\n\t\t\treturn configs;\n\t\t}\n\n\t\tconst loader = find( additionalEntityConfigLoaders, { kind } );\n\t\tif ( ! loader ) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconfigs = await loader.loadEntities();\n\t\tdispatch( addEntities( configs ) );\n\n\t\treturn configs;\n\t};\n","/**\n * Given a value which can be specified as one or the other of a comma-separated\n * string or an array, returns a value normalized to an array of strings, or\n * null if the value cannot be interpreted as either.\n *\n * @param {string|string[]|*} value\n *\n * @return {?(string[])} Normalized field value.\n */\nfunction getNormalizedCommaSeparable( value ) {\n\tif ( typeof value === 'string' ) {\n\t\treturn value.split( ',' );\n\t} else if ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\n\treturn null;\n}\n\nexport default getNormalizedCommaSeparable;\n","/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport { withWeakMapCache, getNormalizedCommaSeparable } from '../utils';\n\n/**\n * An object of properties describing a specific query.\n *\n * @typedef {Object} WPQueriedDataQueryParts\n *\n * @property {number}      page      The query page (1-based index, default 1).\n * @property {number}      perPage   Items per page for query (default 10).\n * @property {string}      stableKey An encoded stable string of all non-\n *                                   pagination, non-fields query parameters.\n * @property {?(string[])} fields    Target subset of fields to derive from\n *                                   item objects.\n * @property {?(number[])} include   Specific item IDs to include.\n * @property {string}      context   Scope under which the request is made;\n *                                   determines returned fields in response.\n */\n\n/**\n * Given a query object, returns an object of parts, including pagination\n * details (`page` and `perPage`, or default values). All other properties are\n * encoded into a stable (idempotent) `stableKey` value.\n *\n * @param {Object} query Optional query object.\n *\n * @return {WPQueriedDataQueryParts} Query parts.\n */\nexport function getQueryParts( query ) {\n\t/**\n\t * @type {WPQueriedDataQueryParts}\n\t */\n\tconst parts = {\n\t\tstableKey: '',\n\t\tpage: 1,\n\t\tperPage: 10,\n\t\tfields: null,\n\t\tinclude: null,\n\t\tcontext: 'default',\n\t};\n\n\t// Ensure stable key by sorting keys. Also more efficient for iterating.\n\tconst keys = Object.keys( query ).sort();\n\n\tfor ( let i = 0; i < keys.length; i++ ) {\n\t\tconst key = keys[ i ];\n\t\tlet value = query[ key ];\n\n\t\tswitch ( key ) {\n\t\t\tcase 'page':\n\t\t\t\tparts[ key ] = Number( value );\n\t\t\t\tbreak;\n\n\t\t\tcase 'per_page':\n\t\t\t\tparts.perPage = Number( value );\n\t\t\t\tbreak;\n\n\t\t\tcase 'context':\n\t\t\t\tparts.context = value;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// While in theory, we could exclude \"_fields\" from the stableKey\n\t\t\t\t// because two request with different fields have the same results\n\t\t\t\t// We're not able to ensure that because the server can decide to omit\n\t\t\t\t// fields from the response even if we explicitly asked for it.\n\t\t\t\t// Example: Asking for titles in posts without title support.\n\t\t\t\tif ( key === '_fields' ) {\n\t\t\t\t\tparts.fields = getNormalizedCommaSeparable( value ) ?? [];\n\t\t\t\t\t// Make sure to normalize value for `stableKey`\n\t\t\t\t\tvalue = parts.fields.join();\n\t\t\t\t}\n\n\t\t\t\t// Two requests with different include values cannot have same results.\n\t\t\t\tif ( key === 'include' ) {\n\t\t\t\t\tif ( typeof value === 'number' ) {\n\t\t\t\t\t\tvalue = value.toString();\n\t\t\t\t\t}\n\t\t\t\t\tparts.include = (\n\t\t\t\t\t\tgetNormalizedCommaSeparable( value ) ?? []\n\t\t\t\t\t).map( Number );\n\t\t\t\t\t// Normalize value for `stableKey`.\n\t\t\t\t\tvalue = parts.include.join();\n\t\t\t\t}\n\n\t\t\t\t// While it could be any deterministic string, for simplicity's\n\t\t\t\t// sake mimic querystring encoding for stable key.\n\t\t\t\t//\n\t\t\t\t// TODO: For consistency with PHP implementation, addQueryArgs\n\t\t\t\t// should accept a key value pair, which may optimize its\n\t\t\t\t// implementation for our use here, vs. iterating an object\n\t\t\t\t// with only a single key.\n\t\t\t\tparts.stableKey +=\n\t\t\t\t\t( parts.stableKey ? '&' : '' ) +\n\t\t\t\t\taddQueryArgs( '', { [ key ]: value } ).slice( 1 );\n\t\t}\n\t}\n\n\treturn parts;\n}\n\nexport default withWeakMapCache( getQueryParts );\n","/**\n * Given a function, returns an enhanced function which caches the result and\n * tracks in WeakMap. The result is only cached if the original function is\n * passed a valid object-like argument (requirement for WeakMap key).\n *\n * @param {Function} fn Original function.\n *\n * @return {Function} Enhanced caching function.\n */\nfunction withWeakMapCache( fn ) {\n\tconst cache = new WeakMap();\n\n\treturn ( key ) => {\n\t\tlet value;\n\t\tif ( cache.has( key ) ) {\n\t\t\tvalue = cache.get( key );\n\t\t} else {\n\t\t\tvalue = fn( key );\n\n\t\t\t// Can reach here if key is not valid for WeakMap, since `has`\n\t\t\t// will return false for invalid key. Since `set` will throw,\n\t\t\t// ensure that key is valid before setting into cache.\n\t\t\tif ( key !== null && typeof key === 'object' ) {\n\t\t\t\tcache.set( key, value );\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t};\n}\n\nexport default withWeakMapCache;\n","/**\n * External dependencies\n */\nimport { map, flowRight, omit, filter, mapValues } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tconservativeMapItem,\n\tifMatchingAction,\n\treplaceAction,\n\tonSubKey,\n} from '../utils';\nimport { DEFAULT_ENTITY_KEY } from '../entities';\nimport getQueryParts from './get-query-parts';\n\nfunction getContextFromAction( action ) {\n\tconst { query } = action;\n\tif ( ! query ) {\n\t\treturn 'default';\n\t}\n\n\tconst queryParts = getQueryParts( query );\n\treturn queryParts.context;\n}\n\n/**\n * Returns a merged array of item IDs, given details of the received paginated\n * items. The array is sparse-like with `undefined` entries where holes exist.\n *\n * @param {?Array<number>} itemIds     Original item IDs (default empty array).\n * @param {number[]}       nextItemIds Item IDs to merge.\n * @param {number}         page        Page of items merged.\n * @param {number}         perPage     Number of items per page.\n *\n * @return {number[]} Merged array of item IDs.\n */\nexport function getMergedItemIds( itemIds, nextItemIds, page, perPage ) {\n\tconst receivedAllIds = page === 1 && perPage === -1;\n\tif ( receivedAllIds ) {\n\t\treturn nextItemIds;\n\t}\n\tconst nextItemIdsStartIndex = ( page - 1 ) * perPage;\n\n\t// If later page has already been received, default to the larger known\n\t// size of the existing array, else calculate as extending the existing.\n\tconst size = Math.max(\n\t\titemIds?.length ?? 0,\n\t\tnextItemIdsStartIndex + nextItemIds.length\n\t);\n\n\t// Preallocate array since size is known.\n\tconst mergedItemIds = new Array( size );\n\n\tfor ( let i = 0; i < size; i++ ) {\n\t\t// Preserve existing item ID except for subset of range of next items.\n\t\tconst isInNextItemsRange =\n\t\t\ti >= nextItemIdsStartIndex &&\n\t\t\ti < nextItemIdsStartIndex + nextItemIds.length;\n\n\t\tmergedItemIds[ i ] = isInNextItemsRange\n\t\t\t? nextItemIds[ i - nextItemIdsStartIndex ]\n\t\t\t: itemIds?.[ i ];\n\t}\n\n\treturn mergedItemIds;\n}\n\n/**\n * Reducer tracking items state, keyed by ID. Items are assumed to be normal,\n * where identifiers are common across all queries.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nexport function items( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS': {\n\t\t\tconst context = getContextFromAction( action );\n\t\t\tconst key = action.key || DEFAULT_ENTITY_KEY;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ context ]: {\n\t\t\t\t\t...state[ context ],\n\t\t\t\t\t...action.items.reduce( ( accumulator, value ) => {\n\t\t\t\t\t\tconst itemId = value[ key ];\n\t\t\t\t\t\taccumulator[ itemId ] = conservativeMapItem(\n\t\t\t\t\t\t\tstate?.[ context ]?.[ itemId ],\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'REMOVE_ITEMS':\n\t\t\treturn mapValues( state, ( contextState ) =>\n\t\t\t\tomit( contextState, action.itemIds )\n\t\t\t);\n\t}\n\treturn state;\n}\n\n/**\n * Reducer tracking item completeness, keyed by ID. A complete item is one for\n * which all fields are known. This is used in supporting `_fields` queries,\n * where not all properties associated with an entity are necessarily returned.\n * In such cases, completeness is used as an indication of whether it would be\n * safe to use queried data for a non-`_fields`-limited request.\n *\n * @param {Object<string,Object<string,boolean>>} state  Current state.\n * @param {Object}                                action Dispatched action.\n *\n * @return {Object<string,Object<string,boolean>>} Next state.\n */\nexport function itemIsComplete( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS': {\n\t\t\tconst context = getContextFromAction( action );\n\t\t\tconst { query, key = DEFAULT_ENTITY_KEY } = action;\n\n\t\t\t// An item is considered complete if it is received without an associated\n\t\t\t// fields query. Ideally, this would be implemented in such a way where the\n\t\t\t// complete aggregate of all fields would satisfy completeness. Since the\n\t\t\t// fields are not consistent across all entities, this would require\n\t\t\t// introspection on the REST schema for each entity to know which fields\n\t\t\t// compose a complete item for that entity.\n\t\t\tconst queryParts = query ? getQueryParts( query ) : {};\n\t\t\tconst isCompleteQuery =\n\t\t\t\t! query || ! Array.isArray( queryParts.fields );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ context ]: {\n\t\t\t\t\t...state[ context ],\n\t\t\t\t\t...action.items.reduce( ( result, item ) => {\n\t\t\t\t\t\tconst itemId = item[ key ];\n\n\t\t\t\t\t\t// Defer to completeness if already assigned. Technically the\n\t\t\t\t\t\t// data may be outdated if receiving items for a field subset.\n\t\t\t\t\t\tresult[ itemId ] =\n\t\t\t\t\t\t\tstate?.[ context ]?.[ itemId ] || isCompleteQuery;\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'REMOVE_ITEMS':\n\t\t\treturn mapValues( state, ( contextState ) =>\n\t\t\t\tomit( contextState, action.itemIds )\n\t\t\t);\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer tracking queries state, keyed by stable query key. Each reducer\n * query object includes `itemIds` and `requestingPageByPerPage`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst receiveQueries = flowRight( [\n\t// Limit to matching action type so we don't attempt to replace action on\n\t// an unhandled action.\n\tifMatchingAction( ( action ) => 'query' in action ),\n\n\t// Inject query parts into action for use both in `onSubKey` and reducer.\n\treplaceAction( ( action ) => {\n\t\t// `ifMatchingAction` still passes on initialization, where state is\n\t\t// undefined and a query is not assigned. Avoid attempting to parse\n\t\t// parts. `onSubKey` will omit by lack of `stableKey`.\n\t\tif ( action.query ) {\n\t\t\treturn {\n\t\t\t\t...action,\n\t\t\t\t...getQueryParts( action.query ),\n\t\t\t};\n\t\t}\n\n\t\treturn action;\n\t} ),\n\n\tonSubKey( 'context' ),\n\n\t// Queries shape is shared, but keyed by query `stableKey` part. Original\n\t// reducer tracks only a single query object.\n\tonSubKey( 'stableKey' ),\n] )( ( state = null, action ) => {\n\tconst { type, page, perPage, key = DEFAULT_ENTITY_KEY } = action;\n\n\tif ( type !== 'RECEIVE_ITEMS' ) {\n\t\treturn state;\n\t}\n\n\treturn getMergedItemIds(\n\t\tstate || [],\n\t\tmap( action.items, key ),\n\t\tpage,\n\t\tperPage\n\t);\n} );\n\n/**\n * Reducer tracking queries state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst queries = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS':\n\t\t\treturn receiveQueries( state, action );\n\t\tcase 'REMOVE_ITEMS':\n\t\t\tconst removedItems = action.itemIds.reduce( ( result, itemId ) => {\n\t\t\t\tresult[ itemId ] = true;\n\t\t\t\treturn result;\n\t\t\t}, {} );\n\n\t\t\treturn mapValues( state, ( contextQueries ) => {\n\t\t\t\treturn mapValues( contextQueries, ( queryItems ) => {\n\t\t\t\t\treturn filter( queryItems, ( queryId ) => {\n\t\t\t\t\t\treturn ! removedItems[ queryId ];\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t} );\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default combineReducers( {\n\titems,\n\titemIsComplete,\n\tqueries,\n} );\n","/**\n * External dependencies\n */\nimport { map, groupBy, flowRight, isEqual, get } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport { ifMatchingAction, replaceAction } from './utils';\nimport { reducer as queriedDataReducer } from './queried-data';\nimport { rootEntitiesConfig, DEFAULT_ENTITY_KEY } from './entities';\n\n/** @typedef {import('./types').AnyFunction} AnyFunction */\n\n/**\n * Reducer managing terms state. Keyed by taxonomy slug, the value is either\n * undefined (if no request has been made for given taxonomy), null (if a\n * request is in-flight for given taxonomy), or the array of terms for the\n * taxonomy.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function terms( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_TERMS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.taxonomy ]: action.terms,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing authors state. Keyed by id.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function users( state = { byId: {}, queries: {} }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_USER_QUERY':\n\t\t\treturn {\n\t\t\t\tbyId: {\n\t\t\t\t\t...state.byId,\n\t\t\t\t\t// Key users by their ID.\n\t\t\t\t\t...action.users.reduce(\n\t\t\t\t\t\t( newUsers, user ) => ( {\n\t\t\t\t\t\t\t...newUsers,\n\t\t\t\t\t\t\t[ user.id ]: user,\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\t{}\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tqueries: {\n\t\t\t\t\t...state.queries,\n\t\t\t\t\t[ action.queryID ]: map(\n\t\t\t\t\t\taction.users,\n\t\t\t\t\t\t( user ) => user.id\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing current user state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function currentUser( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_CURRENT_USER':\n\t\t\treturn action.currentUser;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing taxonomies.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function taxonomies( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_TAXONOMIES':\n\t\t\treturn action.taxonomies;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the current theme.\n *\n * @param {string|undefined} state  Current state.\n * @param {Object}           action Dispatched action.\n *\n * @return {string|undefined} Updated state.\n */\nexport function currentTheme( state = undefined, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_CURRENT_THEME':\n\t\t\treturn action.currentTheme.stylesheet;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the current global styles id.\n *\n * @param {string|undefined} state  Current state.\n * @param {Object}           action Dispatched action.\n *\n * @return {string|undefined} Updated state.\n */\nexport function currentGlobalStylesId( state = undefined, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_CURRENT_GLOBAL_STYLES_ID':\n\t\t\treturn action.id;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the theme base global styles.\n *\n * @param {Record<string, object>} state  Current state.\n * @param {Object}                 action Dispatched action.\n *\n * @return {Record<string, object>} Updated state.\n */\nexport function themeBaseGlobalStyles( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_THEME_GLOBAL_STYLES':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.stylesheet ]: action.globalStyles,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the theme global styles variations.\n *\n * @param {Record<string, object>} state  Current state.\n * @param {Object}                 action Dispatched action.\n *\n * @return {Record<string, object>} Updated state.\n */\nexport function themeGlobalStyleVariations( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_THEME_GLOBAL_STYLE_VARIATIONS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.stylesheet ]: action.variations,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Higher Order Reducer for a given entity config. It supports:\n *\n *  - Fetching\n *  - Editing\n *  - Saving\n *\n * @param {Object} entityConfig Entity config.\n *\n * @return {AnyFunction} Reducer.\n */\nfunction entity( entityConfig ) {\n\treturn flowRight( [\n\t\t// Limit to matching action type so we don't attempt to replace action on\n\t\t// an unhandled action.\n\t\tifMatchingAction(\n\t\t\t( action ) =>\n\t\t\t\taction.name &&\n\t\t\t\taction.kind &&\n\t\t\t\taction.name === entityConfig.name &&\n\t\t\t\taction.kind === entityConfig.kind\n\t\t),\n\n\t\t// Inject the entity config into the action.\n\t\treplaceAction( ( action ) => {\n\t\t\treturn {\n\t\t\t\t...action,\n\t\t\t\tkey: entityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t};\n\t\t} ),\n\t] )(\n\t\tcombineReducers( {\n\t\t\tqueriedData: queriedDataReducer,\n\n\t\t\tedits: ( state = {}, action ) => {\n\t\t\t\tswitch ( action.type ) {\n\t\t\t\t\tcase 'RECEIVE_ITEMS':\n\t\t\t\t\t\tconst context = action?.query?.context ?? 'default';\n\t\t\t\t\t\tif ( context !== 'default' ) {\n\t\t\t\t\t\t\treturn state;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst nextState = { ...state };\n\n\t\t\t\t\t\tfor ( const record of action.items ) {\n\t\t\t\t\t\t\tconst recordId = record[ action.key ];\n\t\t\t\t\t\t\tconst edits = nextState[ recordId ];\n\t\t\t\t\t\t\tif ( ! edits ) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst nextEdits = Object.keys( edits ).reduce(\n\t\t\t\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\t\t\t\t// If the edited value is still different to the persisted value,\n\t\t\t\t\t\t\t\t\t// keep the edited value in edits.\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t// Edits are the \"raw\" attribute values, but records may have\n\t\t\t\t\t\t\t\t\t\t// objects with more properties, so we use `get` here for the\n\t\t\t\t\t\t\t\t\t\t// comparison.\n\t\t\t\t\t\t\t\t\t\t! isEqual(\n\t\t\t\t\t\t\t\t\t\t\tedits[ key ],\n\t\t\t\t\t\t\t\t\t\t\tget(\n\t\t\t\t\t\t\t\t\t\t\t\trecord[ key ],\n\t\t\t\t\t\t\t\t\t\t\t\t'raw',\n\t\t\t\t\t\t\t\t\t\t\t\trecord[ key ]\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\t\t\t// Sometimes the server alters the sent value which means\n\t\t\t\t\t\t\t\t\t\t// we need to also remove the edits before the api request.\n\t\t\t\t\t\t\t\t\t\t( ! action.persistedEdits ||\n\t\t\t\t\t\t\t\t\t\t\t! isEqual(\n\t\t\t\t\t\t\t\t\t\t\t\tedits[ key ],\n\t\t\t\t\t\t\t\t\t\t\t\taction.persistedEdits[ key ]\n\t\t\t\t\t\t\t\t\t\t\t) )\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif ( Object.keys( nextEdits ).length ) {\n\t\t\t\t\t\t\t\tnextState[ recordId ] = nextEdits;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdelete nextState[ recordId ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn nextState;\n\n\t\t\t\t\tcase 'EDIT_ENTITY_RECORD':\n\t\t\t\t\t\tconst nextEdits = {\n\t\t\t\t\t\t\t...state[ action.recordId ],\n\t\t\t\t\t\t\t...action.edits,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tObject.keys( nextEdits ).forEach( ( key ) => {\n\t\t\t\t\t\t\t// Delete cleared edits so that the properties\n\t\t\t\t\t\t\t// are not considered dirty.\n\t\t\t\t\t\t\tif ( nextEdits[ key ] === undefined ) {\n\t\t\t\t\t\t\t\tdelete nextEdits[ key ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ action.recordId ]: nextEdits,\n\t\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t},\n\n\t\t\tsaving: ( state = {}, action ) => {\n\t\t\t\tswitch ( action.type ) {\n\t\t\t\t\tcase 'SAVE_ENTITY_RECORD_START':\n\t\t\t\t\tcase 'SAVE_ENTITY_RECORD_FINISH':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ action.recordId ]: {\n\t\t\t\t\t\t\t\tpending:\n\t\t\t\t\t\t\t\t\taction.type === 'SAVE_ENTITY_RECORD_START',\n\t\t\t\t\t\t\t\terror: action.error,\n\t\t\t\t\t\t\t\tisAutosave: action.isAutosave,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t},\n\n\t\t\tdeleting: ( state = {}, action ) => {\n\t\t\t\tswitch ( action.type ) {\n\t\t\t\t\tcase 'DELETE_ENTITY_RECORD_START':\n\t\t\t\t\tcase 'DELETE_ENTITY_RECORD_FINISH':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ action.recordId ]: {\n\t\t\t\t\t\t\t\tpending:\n\t\t\t\t\t\t\t\t\taction.type ===\n\t\t\t\t\t\t\t\t\t'DELETE_ENTITY_RECORD_START',\n\t\t\t\t\t\t\t\terror: action.error,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t},\n\t\t} )\n\t);\n}\n\n/**\n * Reducer keeping track of the registered entities.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function entitiesConfig( state = rootEntitiesConfig, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ADD_ENTITIES':\n\t\t\treturn [ ...state, ...action.entities ];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer keeping track of the registered entities config and data.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const entities = ( state = {}, action ) => {\n\tconst newConfig = entitiesConfig( state.config, action );\n\n\t// Generates a dynamic reducer for the entities.\n\tlet entitiesDataReducer = state.reducer;\n\tif ( ! entitiesDataReducer || newConfig !== state.config ) {\n\t\tconst entitiesByKind = groupBy( newConfig, 'kind' );\n\t\tentitiesDataReducer = combineReducers(\n\t\t\tObject.entries( entitiesByKind ).reduce(\n\t\t\t\t( memo, [ kind, subEntities ] ) => {\n\t\t\t\t\tconst kindReducer = combineReducers(\n\t\t\t\t\t\tsubEntities.reduce(\n\t\t\t\t\t\t\t( kindMemo, entityConfig ) => ( {\n\t\t\t\t\t\t\t\t...kindMemo,\n\t\t\t\t\t\t\t\t[ entityConfig.name ]: entity( entityConfig ),\n\t\t\t\t\t\t\t} ),\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tmemo[ kind ] = kindReducer;\n\t\t\t\t\treturn memo;\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t)\n\t\t);\n\t}\n\n\tconst newData = entitiesDataReducer( state.records, action );\n\n\tif (\n\t\tnewData === state.records &&\n\t\tnewConfig === state.config &&\n\t\tentitiesDataReducer === state.reducer\n\t) {\n\t\treturn state;\n\t}\n\n\treturn {\n\t\treducer: entitiesDataReducer,\n\t\trecords: newData,\n\t\tconfig: newConfig,\n\t};\n};\n\n/**\n * @typedef {Object} UndoStateMeta\n *\n * @property {number} offset          Where in the undo stack we are.\n * @property {Object} [flattenedUndo] Flattened form of undo stack.\n */\n\n/** @typedef {Array<Object> & UndoStateMeta} UndoState */\n\n/**\n * @type {UndoState}\n *\n * @todo Given how we use this we might want to make a custom class for it.\n */\nconst UNDO_INITIAL_STATE = Object.assign( [], { offset: 0 } );\n\n/** @type {Object} */\nlet lastEditAction;\n\n/**\n * Reducer keeping track of entity edit undo history.\n *\n * @param {UndoState} state  Current state.\n * @param {Object}    action Dispatched action.\n *\n * @return {UndoState} Updated state.\n */\nexport function undo( state = UNDO_INITIAL_STATE, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'EDIT_ENTITY_RECORD':\n\t\tcase 'CREATE_UNDO_LEVEL':\n\t\t\tlet isCreateUndoLevel = action.type === 'CREATE_UNDO_LEVEL';\n\t\t\tconst isUndoOrRedo =\n\t\t\t\t! isCreateUndoLevel &&\n\t\t\t\t( action.meta.isUndo || action.meta.isRedo );\n\t\t\tif ( isCreateUndoLevel ) {\n\t\t\t\taction = lastEditAction;\n\t\t\t} else if ( ! isUndoOrRedo ) {\n\t\t\t\t// Don't lose the last edit cache if the new one only has transient edits.\n\t\t\t\t// Transient edits don't create new levels so updating the cache would make\n\t\t\t\t// us skip an edit later when creating levels explicitly.\n\t\t\t\tif (\n\t\t\t\t\tObject.keys( action.edits ).some(\n\t\t\t\t\t\t( key ) => ! action.transientEdits[ key ]\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tlastEditAction = action;\n\t\t\t\t} else {\n\t\t\t\t\tlastEditAction = {\n\t\t\t\t\t\t...action,\n\t\t\t\t\t\tedits: {\n\t\t\t\t\t\t\t...( lastEditAction && lastEditAction.edits ),\n\t\t\t\t\t\t\t...action.edits,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/** @type {UndoState} */\n\t\t\tlet nextState;\n\n\t\t\tif ( isUndoOrRedo ) {\n\t\t\t\t// @ts-ignore we might consider using Object.assign({}, state)\n\t\t\t\tnextState = [ ...state ];\n\t\t\t\tnextState.offset =\n\t\t\t\t\tstate.offset + ( action.meta.isUndo ? -1 : 1 );\n\n\t\t\t\tif ( state.flattenedUndo ) {\n\t\t\t\t\t// The first undo in a sequence of undos might happen while we have\n\t\t\t\t\t// flattened undos in state. If this is the case, we want execution\n\t\t\t\t\t// to continue as if we were creating an explicit undo level. This\n\t\t\t\t\t// will result in an extra undo level being appended with the flattened\n\t\t\t\t\t// undo values.\n\t\t\t\t\t// We also have to take into account if the `lastEditAction` had opted out\n\t\t\t\t\t// of being tracked in undo history, like the action that persists the latest\n\t\t\t\t\t// content right before saving. In that case we have to update the `lastEditAction`\n\t\t\t\t\t// to avoid returning early before applying the existing flattened undos.\n\t\t\t\t\tisCreateUndoLevel = true;\n\t\t\t\t\tif ( ! lastEditAction.meta.undo ) {\n\t\t\t\t\t\tlastEditAction.meta.undo = {\n\t\t\t\t\t\t\tedits: {},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\taction = lastEditAction;\n\t\t\t\t} else {\n\t\t\t\t\treturn nextState;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! action.meta.undo ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// Transient edits don't create an undo level, but are\n\t\t\t// reachable in the next meaningful edit to which they\n\t\t\t// are merged. They are defined in the entity's config.\n\t\t\tif (\n\t\t\t\t! isCreateUndoLevel &&\n\t\t\t\t! Object.keys( action.edits ).some(\n\t\t\t\t\t( key ) => ! action.transientEdits[ key ]\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// @ts-ignore we might consider using Object.assign({}, state)\n\t\t\t\tnextState = [ ...state ];\n\t\t\t\tnextState.flattenedUndo = {\n\t\t\t\t\t...state.flattenedUndo,\n\t\t\t\t\t...action.edits,\n\t\t\t\t};\n\t\t\t\tnextState.offset = state.offset;\n\t\t\t\treturn nextState;\n\t\t\t}\n\n\t\t\t// Clear potential redos, because this only supports linear history.\n\t\t\tnextState =\n\t\t\t\t// @ts-ignore this needs additional cleanup, probably involving code-level changes\n\t\t\t\tnextState || state.slice( 0, state.offset || undefined );\n\t\t\tnextState.offset = nextState.offset || 0;\n\t\t\tnextState.pop();\n\t\t\tif ( ! isCreateUndoLevel ) {\n\t\t\t\tnextState.push( {\n\t\t\t\t\tkind: action.meta.undo.kind,\n\t\t\t\t\tname: action.meta.undo.name,\n\t\t\t\t\trecordId: action.meta.undo.recordId,\n\t\t\t\t\tedits: {\n\t\t\t\t\t\t...state.flattenedUndo,\n\t\t\t\t\t\t...action.meta.undo.edits,\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t}\n\t\t\t// When an edit is a function it's an optimization to avoid running some expensive operation.\n\t\t\t// We can't rely on the function references being the same so we opt out of comparing them here.\n\t\t\tconst comparisonUndoEdits = Object.values(\n\t\t\t\taction.meta.undo.edits\n\t\t\t).filter( ( edit ) => typeof edit !== 'function' );\n\t\t\tconst comparisonEdits = Object.values( action.edits ).filter(\n\t\t\t\t( edit ) => typeof edit !== 'function'\n\t\t\t);\n\t\t\tif ( ! isShallowEqual( comparisonUndoEdits, comparisonEdits ) ) {\n\t\t\t\tnextState.push( {\n\t\t\t\t\tkind: action.kind,\n\t\t\t\t\tname: action.name,\n\t\t\t\t\trecordId: action.recordId,\n\t\t\t\t\tedits: isCreateUndoLevel\n\t\t\t\t\t\t? { ...state.flattenedUndo, ...action.edits }\n\t\t\t\t\t\t: action.edits,\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn nextState;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing embed preview data.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function embedPreviews( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_EMBED_PREVIEW':\n\t\t\tconst { url, preview } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ url ]: preview,\n\t\t\t};\n\t}\n\treturn state;\n}\n\n/**\n * State which tracks whether the user can perform an action on a REST\n * resource.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function userPermissions( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_USER_PERMISSION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.key ]: action.isAllowed,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning autosaves keyed by their parent's post id.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function autosaves( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_AUTOSAVES':\n\t\t\tconst { postId, autosaves: autosavesData } = action;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ postId ]: autosavesData,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport function blockPatterns( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_BLOCK_PATTERNS':\n\t\t\treturn action.patterns;\n\t}\n\n\treturn state;\n}\n\nexport function blockPatternCategories( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_BLOCK_PATTERN_CATEGORIES':\n\t\t\treturn action.categories;\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( {\n\tterms,\n\tusers,\n\tcurrentTheme,\n\tcurrentGlobalStylesId,\n\tcurrentUser,\n\tthemeGlobalStyleVariations,\n\tthemeBaseGlobalStyles,\n\ttaxonomies,\n\tentities,\n\tundo,\n\tembedPreviews,\n\tuserPermissions,\n\tautosaves,\n\tblockPatterns,\n\tblockPatternCategories,\n} );\n","'use strict';\n\n/** @typedef {(...args: any[]) => *[]} GetDependants */\n\n/** @typedef {() => void} Clear */\n\n/**\n * @typedef {{\n *   getDependants: GetDependants,\n *   clear: Clear\n * }} EnhancedSelector\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef CacheNode\n *\n * @property {?CacheNode|undefined} [prev] Previous node.\n * @property {?CacheNode|undefined} [next] Next node.\n * @property {*[]} args Function arguments for cache entry.\n * @property {*} val Function result.\n */\n\n/**\n * @typedef Cache\n *\n * @property {Clear} clear Function to clear cache.\n * @property {boolean} [isUniqueByDependants] Whether dependants are valid in\n * considering cache uniqueness. A cache is unique if dependents are all arrays\n * or objects.\n * @property {CacheNode?} [head] Cache head.\n * @property {*[]} [lastDependants] Dependants from previous invocation.\n */\n\n/**\n * Arbitrary value used as key for referencing cache object in WeakMap tree.\n *\n * @type {{}}\n */\nvar LEAF_KEY = {};\n\n/**\n * Returns the first argument as the sole entry in an array.\n *\n * @template T\n *\n * @param {T} value Value to return.\n *\n * @return {[T]} Value returned as entry in array.\n */\nfunction arrayOf(value) {\n\treturn [value];\n}\n\n/**\n * Returns true if the value passed is object-like, or false otherwise. A value\n * is object-like if it can support property assignment, e.g. object or array.\n *\n * @param {*} value Value to test.\n *\n * @return {boolean} Whether value is object-like.\n */\nfunction isObjectLike(value) {\n\treturn !!value && 'object' === typeof value;\n}\n\n/**\n * Creates and returns a new cache object.\n *\n * @return {Cache} Cache object.\n */\nfunction createCache() {\n\t/** @type {Cache} */\n\tvar cache = {\n\t\tclear: function () {\n\t\t\tcache.head = null;\n\t\t},\n\t};\n\n\treturn cache;\n}\n\n/**\n * Returns true if entries within the two arrays are strictly equal by\n * reference from a starting index.\n *\n * @param {*[]} a First array.\n * @param {*[]} b Second array.\n * @param {number} fromIndex Index from which to start comparison.\n *\n * @return {boolean} Whether arrays are shallowly equal.\n */\nfunction isShallowEqual(a, b, fromIndex) {\n\tvar i;\n\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (i = fromIndex; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns a memoized selector function. The getDependants function argument is\n * called before the memoized selector and is expected to return an immutable\n * reference or array of references on which the selector depends for computing\n * its own return value. The memoize cache is preserved only as long as those\n * dependant references remain the same. If getDependants returns a different\n * reference(s), the cache is cleared and the selector value regenerated.\n *\n * @template {(...args: *[]) => *} S\n *\n * @param {S} selector Selector function.\n * @param {GetDependants=} getDependants Dependant getter returning an array of\n * references used in cache bust consideration.\n */\nexport default function (selector, getDependants) {\n\t/** @type {WeakMap<*,*>} */\n\tvar rootCache;\n\n\t/** @type {GetDependants} */\n\tvar normalizedGetDependants = getDependants ? getDependants : arrayOf;\n\n\t/**\n\t * Returns the cache for a given dependants array. When possible, a WeakMap\n\t * will be used to create a unique cache for each set of dependants. This\n\t * is feasible due to the nature of WeakMap in allowing garbage collection\n\t * to occur on entries where the key object is no longer referenced. Since\n\t * WeakMap requires the key to be an object, this is only possible when the\n\t * dependant is object-like. The root cache is created as a hierarchy where\n\t * each top-level key is the first entry in a dependants set, the value a\n\t * WeakMap where each key is the next dependant, and so on. This continues\n\t * so long as the dependants are object-like. If no dependants are object-\n\t * like, then the cache is shared across all invocations.\n\t *\n\t * @see isObjectLike\n\t *\n\t * @param {*[]} dependants Selector dependants.\n\t *\n\t * @return {Cache} Cache object.\n\t */\n\tfunction getCache(dependants) {\n\t\tvar caches = rootCache,\n\t\t\tisUniqueByDependants = true,\n\t\t\ti,\n\t\t\tdependant,\n\t\t\tmap,\n\t\t\tcache;\n\n\t\tfor (i = 0; i < dependants.length; i++) {\n\t\t\tdependant = dependants[i];\n\n\t\t\t// Can only compose WeakMap from object-like key.\n\t\t\tif (!isObjectLike(dependant)) {\n\t\t\t\tisUniqueByDependants = false;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Does current segment of cache already have a WeakMap?\n\t\t\tif (caches.has(dependant)) {\n\t\t\t\t// Traverse into nested WeakMap.\n\t\t\t\tcaches = caches.get(dependant);\n\t\t\t} else {\n\t\t\t\t// Create, set, and traverse into a new one.\n\t\t\t\tmap = new WeakMap();\n\t\t\t\tcaches.set(dependant, map);\n\t\t\t\tcaches = map;\n\t\t\t}\n\t\t}\n\n\t\t// We use an arbitrary (but consistent) object as key for the last item\n\t\t// in the WeakMap to serve as our running cache.\n\t\tif (!caches.has(LEAF_KEY)) {\n\t\t\tcache = createCache();\n\t\t\tcache.isUniqueByDependants = isUniqueByDependants;\n\t\t\tcaches.set(LEAF_KEY, cache);\n\t\t}\n\n\t\treturn caches.get(LEAF_KEY);\n\t}\n\n\t/**\n\t * Resets root memoization cache.\n\t */\n\tfunction clear() {\n\t\trootCache = new WeakMap();\n\t}\n\n\t/* eslint-disable jsdoc/check-param-names */\n\t/**\n\t * The augmented selector call, considering first whether dependants have\n\t * changed before passing it to underlying memoize function.\n\t *\n\t * @param {*}    source    Source object for derivation.\n\t * @param {...*} extraArgs Additional arguments to pass to selector.\n\t *\n\t * @return {*} Selector result.\n\t */\n\t/* eslint-enable jsdoc/check-param-names */\n\tfunction callSelector(/* source, ...extraArgs */) {\n\t\tvar len = arguments.length,\n\t\t\tcache,\n\t\t\tnode,\n\t\t\ti,\n\t\t\targs,\n\t\t\tdependants;\n\n\t\t// Create copy of arguments (avoid leaking deoptimization).\n\t\targs = new Array(len);\n\t\tfor (i = 0; i < len; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\n\t\tdependants = normalizedGetDependants.apply(null, args);\n\t\tcache = getCache(dependants);\n\n\t\t// If not guaranteed uniqueness by dependants (primitive type), shallow\n\t\t// compare against last dependants and, if references have changed,\n\t\t// destroy cache to recalculate result.\n\t\tif (!cache.isUniqueByDependants) {\n\t\t\tif (\n\t\t\t\tcache.lastDependants &&\n\t\t\t\t!isShallowEqual(dependants, cache.lastDependants, 0)\n\t\t\t) {\n\t\t\t\tcache.clear();\n\t\t\t}\n\n\t\t\tcache.lastDependants = dependants;\n\t\t}\n\n\t\tnode = cache.head;\n\t\twhile (node) {\n\t\t\t// Check whether node arguments match arguments\n\t\t\tif (!isShallowEqual(node.args, args, 1)) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif (node !== cache.head) {\n\t\t\t\t// Adjust siblings to point to each other.\n\t\t\t\t/** @type {CacheNode} */ (node.prev).next = node.next;\n\t\t\t\tif (node.next) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = cache.head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {CacheNode} */ (cache.head).prev = node;\n\t\t\t\tcache.head = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\tnode = /** @type {CacheNode} */ ({\n\t\t\t// Generate the result from original function\n\t\t\tval: selector.apply(null, args),\n\t\t});\n\n\t\t// Avoid including the source object in the cache.\n\t\targs[0] = null;\n\t\tnode.args = args;\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif (cache.head) {\n\t\t\tcache.head.prev = node;\n\t\t\tnode.next = cache.head;\n\t\t}\n\n\t\tcache.head = node;\n\n\t\treturn node.val;\n\t}\n\n\tcallSelector.getDependants = normalizedGetDependants;\n\tcallSelector.clear = clear;\n\tclear();\n\n\treturn /** @type {S & EnhancedSelector} */ (callSelector);\n}\n","/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport EquivalentKeyMap from 'equivalent-key-map';\nimport { get, set } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport getQueryParts from './get-query-parts';\n\n/**\n * Cache of state keys to EquivalentKeyMap where the inner map tracks queries\n * to their resulting items set. WeakMap allows garbage collection on expired\n * state references.\n *\n * @type {WeakMap<Object,EquivalentKeyMap>}\n */\nconst queriedItemsCacheByState = new WeakMap();\n\n/**\n * Returns items for a given query, or null if the items are not known.\n *\n * @param {Object}  state State object.\n * @param {?Object} query Optional query.\n *\n * @return {?Array} Query items.\n */\nfunction getQueriedItemsUncached( state, query ) {\n\tconst { stableKey, page, perPage, include, fields, context } =\n\t\tgetQueryParts( query );\n\tlet itemIds;\n\n\tif ( state.queries?.[ context ]?.[ stableKey ] ) {\n\t\titemIds = state.queries[ context ][ stableKey ];\n\t}\n\n\tif ( ! itemIds ) {\n\t\treturn null;\n\t}\n\n\tconst startOffset = perPage === -1 ? 0 : ( page - 1 ) * perPage;\n\tconst endOffset =\n\t\tperPage === -1\n\t\t\t? itemIds.length\n\t\t\t: Math.min( startOffset + perPage, itemIds.length );\n\n\tconst items = [];\n\tfor ( let i = startOffset; i < endOffset; i++ ) {\n\t\tconst itemId = itemIds[ i ];\n\t\tif ( Array.isArray( include ) && ! include.includes( itemId ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Having a target item ID doesn't guarantee that this object has been queried.\n\t\tif ( ! state.items[ context ]?.hasOwnProperty( itemId ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst item = state.items[ context ][ itemId ];\n\n\t\tlet filteredItem;\n\t\tif ( Array.isArray( fields ) ) {\n\t\t\tfilteredItem = {};\n\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tconst value = get( item, field );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t} else {\n\t\t\t// If expecting a complete item, validate that completeness, or\n\t\t\t// otherwise abort.\n\t\t\tif ( ! state.itemIsComplete[ context ]?.[ itemId ] ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfilteredItem = item;\n\t\t}\n\n\t\titems.push( filteredItem );\n\t}\n\n\treturn items;\n}\n\n/**\n * Returns items for a given query, or null if the items are not known. Caches\n * result both per state (by reference) and per query (by deep equality).\n * The caching approach is intended to be durable to query objects which are\n * deeply but not referentially equal, since otherwise:\n *\n * `getQueriedItems( state, {} ) !== getQueriedItems( state, {} )`\n *\n * @param {Object}  state State object.\n * @param {?Object} query Optional query.\n *\n * @return {?Array} Query items.\n */\nexport const getQueriedItems = createSelector( ( state, query = {} ) => {\n\tlet queriedItemsCache = queriedItemsCacheByState.get( state );\n\tif ( queriedItemsCache ) {\n\t\tconst queriedItems = queriedItemsCache.get( query );\n\t\tif ( queriedItems !== undefined ) {\n\t\t\treturn queriedItems;\n\t\t}\n\t} else {\n\t\tqueriedItemsCache = new EquivalentKeyMap();\n\t\tqueriedItemsCacheByState.set( state, queriedItemsCache );\n\t}\n\n\tconst items = getQueriedItemsUncached( state, query );\n\tqueriedItemsCache.set( query, items );\n\treturn items;\n} );\n","/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { set, map, find, get, filter } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport { getNormalizedCommaSeparable, isRawAttribute } from './utils';\nimport type {\n\tContext,\n\tDefaultContextOf,\n\tEntityRecordOf,\n\tKeyOf,\n\tKind,\n\tKindOf,\n\tName,\n\tNameOf,\n\tUser,\n\tWpTemplate,\n} from './entity-types';\n\n// This is an incomplete, high-level approximation of the State type.\n// It makes the selectors slightly more safe, but is intended to evolve\n// into a more detailed representation over time.\n// See https://github.com/WordPress/gutenberg/pull/40025#discussion_r865410589 for more context.\ninterface State {\n\tautosaves: Record< string | number, Array< unknown > >;\n\tblockPatterns: Array< unknown >;\n\tblockPatternCategories: Array< unknown >;\n\tcurrentGlobalStylesId: string;\n\tcurrentTheme: string;\n\tcurrentUser: User< 'edit' >;\n\tembedPreviews: Record< string, { html: string } >;\n\tentities: EntitiesState;\n\tthemeBaseGlobalStyles: Record< string, Object >;\n\tthemeGlobalStyleVariations: Record< string, string >;\n\tundo: UndoState;\n\tusers: UserState;\n}\n\ninterface EntitiesState {\n\tconfig: EntityConfig[];\n\trecords: Record< Kind, Record< Name, EntityState< Kind, Name > > >;\n}\n\ninterface EntityState< K extends Kind, N extends Name > {\n\tedits: Record< KeyOf< K, N >, Partial< EntityRecordOf< K, N > > >;\n\tsaving: Record< KeyOf< K, N >, { pending: boolean } >;\n}\n\ninterface EntityConfig {\n\tname: Name;\n\tkind: Kind;\n}\n\ninterface UndoState extends Array< Object > {\n\tflattenedUndo: unknown;\n\toffset: number;\n}\n\ninterface UserState {\n\tqueries: Record< string, GenericRecordKey[] >;\n\tbyId: Record< GenericRecordKey, User< 'edit' > >;\n}\n\ntype GenericRecordKey = number | string;\ntype EntityRecord = any;\ntype Optional< T > = T | undefined;\n\n/**\n * HTTP Query parameters sent with the API request to fetch the entity records.\n */\nexport type EntityQuery<\n\tC extends Context,\n\tWithFields extends boolean = true\n> = Omit< Record< string, any >, '_fields' > & {\n\tcontext?: C;\n} & ( WithFields extends true\n\t\t? {\n\t\t\t\t/**\n\t\t\t\t * The requested fields. If specified, the REST API will remove from the response\n\t\t\t\t * any fields not on that list.\n\t\t\t\t */\n\t\t\t\t_fields: string[];\n\t\t  }\n\t\t: {} );\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param  state Data state.\n * @param  url   URL the preview would be for.\n *\n * @return Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) =>\n\t\t( state: State, url: string ): boolean => {\n\t\t\treturn select( STORE_NAME ).isResolving( 'getEmbedPreview', [\n\t\t\t\turl,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @deprecated since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n *\n * @param  state Data state.\n * @param  query Optional object of query parameters to\n *               include with request.\n * @return Authors list.\n */\nexport function getAuthors(\n\tstate: State,\n\tquery?: EntityQuery< any >\n): User< 'edit' >[] {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\tsince: '5.9',\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns the current user.\n *\n * @param  state Data state.\n *\n * @return Current user object.\n */\nexport function getCurrentUser( state: State ): User< 'edit' > {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param  state   Data state.\n * @param  queryID Query ID.\n *\n * @return Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state: State, queryID: string ): User< 'edit' >[] => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state: State, queryID: string ) => [\n\t\tstate.users.queries[ queryID ],\n\t\tstate.users.byId,\n\t]\n);\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @deprecated since WordPress 6.0. Use getEntitiesConfig instead\n * @param  state Data state.\n * @param  kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesByKind( state: State, kind: Kind ): Array< any > {\n\tdeprecated( \"wp.data.select( 'core' ).getEntitiesByKind()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntitiesConfig()\",\n\t} );\n\treturn getEntitiesConfig( state, kind );\n}\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @param  state Data state.\n * @param  kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesConfig( state: State, kind: Kind ): Array< any > {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @deprecated since WordPress 6.0. Use getEntityConfig instead\n * @param  state Data state.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntity( state: State, kind: Kind, name: Name ): any {\n\tdeprecated( \"wp.data.select( 'core' ).getEntity()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntityConfig()\",\n\t} );\n\treturn getEntityConfig( state, kind, name );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @param  state Data state.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntityConfig( state: State, kind: Kind, name: Name ): any {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * GetEntityRecord is declared as an *interface*, but it actually describes\n * the specifies the getEntityRecord *function* signature. It may seem unusual,\n * but it's just how TypeScript implements function overloading.\n *\n * More accurately, GetEntityRecord distinguishes between two different signatures\n * the getEntityRecord selector has:\n *\n * 1. When query._fields is not given, the returned type is EntityRecordOf< K, N, C >\n * 2. When query._fields is given, the returned type is Partial<EntityRecordOf< K, N, C >>\n *\n * Unfortunately, due to a TypeScript limitation (https://github.com/microsoft/TypeScript/issues/23132)\n * we can't use a single function signature with a return type such as:\n *\n *    Fields extends undefined\n * \t    ? EntityRecordOf< K, N, C >\n * \t\t  : Partial< EntityRecordOf< K, N, C > >\n */\ninterface GetEntityRecord {\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< K, N >,\n\t\tquery: EntityQuery< C, true >\n\t): Partial< EntityRecordOf< K, N, C > > | null | undefined;\n\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< K, N >,\n\t\tquery?: EntityQuery< C, false >\n\t): EntityRecordOf< K, N, C > | null | undefined;\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key\n * @param  query Optional query. If requesting specific\n *               fields, fields must always include the ID.\n *\n * @return Record.\n */\nexport const getEntityRecord: GetEntityRecord = createSelector(\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< R >,\n\t\tquery\n\t) => {\n\t\tconst queriedState = get( state.entities.records, [\n\t\t\tkind,\n\t\t\tname,\n\t\t\t'queriedData',\n\t\t] );\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ key ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ key ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ key ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields ) ?? [];\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tconst value = get( item, field );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t\treturn filteredItem;\n\t\t}\n\n\t\treturn item;\n\t},\n\t( state: State, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity records from the API if the entity record isn't available in the local state.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key\n *\n * @return Record.\n */\nexport function __experimentalGetEntityRecordNoResolver<\n\tK extends Kind,\n\tN extends Name\n>( state: State, kind: K, name: N, key: KeyOf< K, N > ) {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param  state State tree.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key.\n *\n * @return Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t< K extends Kind, N extends Name >(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< K, N >\n\t): EntityRecord | undefined => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\tif (\n\t\t\t\t\tisRawAttribute( getEntityConfig( state, kind, name ), _key )\n\t\t\t\t) {\n\t\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t\t'raw',\n\t\t\t\t\t\trecord[ _key ]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[ _key ] = record[ _key ];\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t(\n\t\tstate: State,\n\t\tkind: Kind,\n\t\tname: Name,\n\t\trecordId: GenericRecordKey,\n\t\tquery?: EntityQuery< any >\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  query Optional terms query.\n *\n * @return  Whether entity records have been received.\n */\nexport function hasEntityRecords<\n\tR extends EntityRecordOf< K, N >,\n\tC extends Context = DefaultContextOf< R >,\n\tK extends Kind = KindOf< R >,\n\tN extends Name = NameOf< R >\n>( state: State, kind: K, name: N, query?: EntityQuery< C > ): boolean {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * GetEntityRecord is declared as an *interface*, but it actually describes\n * the specifies the getEntityRecord *function* signature. It may seem unusual,\n * but it's just how TypeScript implements function overloading.\n *\n * More accurately, GetEntityRecord distinguishes between two different signatures\n * the getEntityRecord selector has:\n *\n * 1. When query._fields is not given, the returned type is EntityRecordOf< K, N, C >[]\n * 2. When query._fields is given, the returned type is Partial<EntityRecordOf< K, N, C >>[]\n *\n * Unfortunately, due to a TypeScript limitation (https://github.com/microsoft/TypeScript/issues/23132)\n * we can't use a single function signature with a return type such as:\n *\n *    Fields extends undefined\n * \t    ? EntityRecordOf< K, N, C >[]\n * \t\t  : Partial< EntityRecordOf< K, N, C > >[]\n */\ninterface GetEntityRecords {\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tquery: EntityQuery< C, true >\n\t): Partial< EntityRecordOf< K, N, C > >[] | null | undefined;\n\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tquery?: EntityQuery< C, false >\n\t): EntityRecordOf< K, N, C >[] | null | undefined;\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  query Optional terms query. If requesting specific\n *               fields, fields must always include the ID.\n *\n * @return Records.\n */\nexport const getEntityRecords: GetEntityRecords = <\n\tR extends EntityRecordOf< K, N >,\n\tC extends Context = DefaultContextOf< R >,\n\tK extends Kind = KindOf< R >,\n\tN extends Name = NameOf< R >\n>(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\tquery\n) => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState = get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedItems( queriedState, query );\n};\n\ntype DirtyEntityRecord = {\n\ttitle: string;\n\tkey: GenericRecordKey;\n\tname: Name;\n\tkind: Kind;\n};\n/**\n * Returns the list of dirty entity records.\n *\n * @param  state State tree.\n *\n * @return The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst dirtyRecords: DirtyEntityRecord[] = [];\n\t\t( Object.keys( records ) as Kind[] ).forEach(\n\t\t\t< K extends Kind >( kind: K ) => {\n\t\t\t\t( Object.keys( records[ kind ] ) as Name[] ).forEach(\n\t\t\t\t\t< N extends Name >( name: N ) => {\n\t\t\t\t\t\tconst primaryKeys = (\n\t\t\t\t\t\t\tObject.keys(\n\t\t\t\t\t\t\t\trecords[ kind ][ name ].edits\n\t\t\t\t\t\t\t) as KeyOf< K, N >[]\n\t\t\t\t\t\t ).filter(\n\t\t\t\t\t\t\t( primaryKey ) =>\n\t\t\t\t\t\t\t\t// The entity record must exist (not be deleted),\n\t\t\t\t\t\t\t\t// and it must have edits.\n\t\t\t\t\t\t\t\tgetEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\thasEditsForEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\t\t\tconst entityConfig = getEntityConfig(\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\t\t\tkey: entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\t\t\tentityConfig?.getTitle?.(\n\t\t\t\t\t\t\t\t\t\t\tentityRecord\n\t\t\t\t\t\t\t\t\t\t) || '',\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the list of entities currently being saved.\n *\n * @param  state State tree.\n *\n * @return The list of records being saved.\n */\nexport const __experimentalGetEntitiesBeingSaved = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst recordsBeingSaved: DirtyEntityRecord[] = [];\n\t\t( Object.keys( records ) as Kind[] ).forEach(\n\t\t\t< K extends Kind >( kind: K ) => {\n\t\t\t\t( Object.keys( records[ kind ] ) as Name[] ).forEach(\n\t\t\t\t\t< N extends Name >( name: N ) => {\n\t\t\t\t\t\tconst primaryKeys = (\n\t\t\t\t\t\t\tObject.keys(\n\t\t\t\t\t\t\t\trecords[ kind ][ name ].saving\n\t\t\t\t\t\t\t) as KeyOf< K, N >[]\n\t\t\t\t\t\t ).filter( ( primaryKey ) =>\n\t\t\t\t\t\t\tisSavingEntityRecord(\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\t\t\tconst entityConfig = getEntityConfig(\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\trecordsBeingSaved.push( {\n\t\t\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\t\t\tkey: entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\t\t\tentityConfig?.getTitle?.(\n\t\t\t\t\t\t\t\t\t\t\tentityRecord\n\t\t\t\t\t\t\t\t\t\t) || '',\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t\treturn recordsBeingSaved;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's edits.\n */\nexport function getEntityRecordEdits< K extends Kind, N extends Name >(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\trecordId: KeyOf< K, N >\n): Optional< any > {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'edits',\n\t\trecordId as string | number,\n\t] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t< K extends Kind, N extends Name >(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\trecordId: KeyOf< K, N >\n\t): Optional< any > => {\n\t\tconst { transientEdits } = getEntityConfig( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state: State, kind: Kind, name: Name, recordId: GenericRecordKey ) => [\n\t\tstate.entities.config,\n\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord< K extends Kind, N extends Name >(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\trecordId: KeyOf< K, N >\n): boolean {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t< K extends Kind, N extends Name >(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\trecordId: KeyOf< K, N >\n\t): EntityRecord | undefined => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t(\n\t\tstate: State,\n\t\tkind: Kind,\n\t\tname: Name,\n\t\trecordId: GenericRecordKey,\n\t\tquery?: EntityQuery< any >\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): boolean {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord< K extends Kind, N extends Name >(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\trecordId: KeyOf< K, N >\n): boolean {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId as GenericRecordKey, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): boolean {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'deleting', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntitySaveError(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): any {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntityDeleteError(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): any {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'deleting',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param  state State tree.\n *\n * @return The current undo offset.\n */\nfunction getCurrentUndoOffset( state: State ): number {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param  state State tree.\n *\n * @return The edit.\n */\nexport function getUndoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param  state State tree.\n *\n * @return The edit.\n */\nexport function getRedoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param  state State tree.\n *\n * @return Whether there is a previous edit or not.\n */\nexport function hasUndo( state: State ): boolean {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param  state State tree.\n *\n * @return Whether there is a next edit or not.\n */\nexport function hasRedo( state: State ): boolean {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param  state Data state.\n *\n * @return The current theme.\n */\nexport function getCurrentTheme( state: State ): any {\n\treturn getEntityRecord( state, 'root', 'theme', state.currentTheme );\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param  state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentGlobalStylesId( state: State ): string {\n\treturn state.currentGlobalStylesId;\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param  state Data state.\n *\n * @return Index data.\n */\nexport function getThemeSupports( state: State ): any {\n\treturn getCurrentTheme( state )?.theme_supports ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param  state Data state.\n * @param  url   Embedded URL.\n *\n * @return Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state: State, url: string ): any {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param  state Data state.\n * @param  url   Embedded URL.\n *\n * @return Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state: State, url: string ): boolean {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param  state    Data state.\n * @param  action   Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param  id       Optional ID of the rest resource to check.\n *\n * @return Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser(\n\tstate: State,\n\taction: string,\n\tresource: string,\n\tid?: GenericRecordKey\n): boolean | undefined {\n\tconst key = [ action, resource, id ].filter( Boolean ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns whether the current user can edit the given entity.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param  state    Data state.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record's id.\n * @return Whether or not the user can edit,\n * or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUserEditEntityRecord(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): boolean | undefined {\n\tconst entityConfig = getEntityConfig( state, kind, name );\n\tif ( ! entityConfig ) {\n\t\treturn false;\n\t}\n\tconst resource = entityConfig.__unstable_rest_base;\n\n\treturn canUser( state, 'update', resource, recordId );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n *\n * @return An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves(\n\tstate: State,\n\tpostType: string,\n\tpostId: GenericRecordKey\n): Array< any > | undefined {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n * @param  authorId The id of the author.\n *\n * @return The autosave for the post and author.\n */\nexport function getAutosave(\n\tstate: State,\n\tpostType: string,\n\tpostId: GenericRecordKey,\n\tauthorId: GenericRecordKey\n): EntityRecord | undefined {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n *\n * @return True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) =>\n\t\t(\n\t\t\tstate: State,\n\t\t\tpostType: string,\n\t\t\tpostId: GenericRecordKey\n\t\t): boolean => {\n\t\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\t\tpostType,\n\t\t\t\tpostId,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param  state Editor state.\n *\n * @return A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t// This unused state argument is listed here for the documentation generating tool (docgen).\n\t( state: State ) => [],\n\t( state: State ) => [\n\t\tstate.undo.length,\n\t\tstate.undo.offset,\n\t\tstate.undo.flattenedUndo,\n\t]\n);\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param  state Editor state.\n * @param  link  Link.\n *\n * @return The template record.\n */\nexport function __experimentalGetTemplateForLink(\n\tstate: State,\n\tlink: string\n): WpTemplate< 'edit' > | null {\n\tconst records = getEntityRecords( state, 'postType', 'wp_template', {\n\t\t'find-template': link,\n\t} );\n\n\tconst template = records?.length ? records[ 0 ] : null;\n\tif ( template ) {\n\t\treturn getEditedEntityRecord(\n\t\t\tstate,\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\t}\n\treturn template;\n}\n\n/**\n * Retrieve the current theme's base global styles\n *\n * @param  state Editor state.\n *\n * @return The Global Styles object.\n */\nexport function __experimentalGetCurrentThemeBaseGlobalStyles(\n\tstate: State\n): any {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeBaseGlobalStyles[ currentTheme.stylesheet ];\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param  state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentThemeGlobalStylesVariations(\n\tstate: State\n): string | null {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeGlobalStyleVariations[ currentTheme.stylesheet ];\n}\n\n/**\n * Retrieve the list of registered block patterns.\n *\n * @param  state Data state.\n *\n * @return Block pattern list.\n */\nexport function getBlockPatterns( state: State ): Array< any > {\n\treturn state.blockPatterns;\n}\n\n/**\n * Retrieve the list of registered block pattern categories.\n *\n * @param  state Data state.\n *\n * @return Block pattern category list.\n */\nexport function getBlockPatternCategories( state: State ): Array< any > {\n\treturn state.blockPatternCategories;\n}\n","/**\n * Checks whether the attribute is a \"raw\" attribute or not.\n *\n * @param {Object} entity    Entity record.\n * @param {string} attribute Attribute name.\n *\n * @return {boolean} Is the attribute raw\n */\nexport default function isRawAttribute( entity, attribute ) {\n\treturn ( entity.rawAttributes || [] ).includes( attribute );\n}\n","import {\n  pascalCase,\n  pascalCaseTransform,\n  pascalCaseTransformMerge,\n  Options,\n} from \"pascal-case\";\n\nexport { Options };\n\nexport function camelCaseTransform(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransform(input, index);\n}\n\nexport function camelCaseTransformMerge(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransformMerge(input);\n}\n\nexport function camelCase(input: string, options: Options = {}) {\n  return pascalCase(input, {\n    transform: camelCaseTransform,\n    ...options,\n  });\n}\n","/**\n * Higher-order function which forward the resolution to another resolver with the same arguments.\n *\n * @param {string} resolverName forwarded resolver.\n *\n * @return {Function} Enhanced resolver.\n */\nconst forwardResolver =\n\t( resolverName ) =>\n\t( ...args ) =>\n\tasync ( { resolveSelect } ) => {\n\t\tawait resolveSelect[ resolverName ]( ...args );\n\t};\n\nexport default forwardResolver;\n","/**\n * External dependencies\n */\nimport { camelCase } from 'change-case';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getOrLoadEntitiesConfig, DEFAULT_ENTITY_KEY } from './entities';\nimport { forwardResolver, getNormalizedCommaSeparable } from './utils';\n\n/**\n * Requests authors from the REST API.\n *\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport const getAuthors =\n\t( query ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst path = addQueryArgs(\n\t\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\t\tquery\n\t\t);\n\t\tconst users = await apiFetch( { path } );\n\t\tdispatch.receiveUserQuery( path, users );\n\t};\n\n/**\n * Requests the current user from the REST API.\n */\nexport const getCurrentUser =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst currentUser = await apiFetch( { path: '/wp/v2/users/me' } );\n\t\tdispatch.receiveCurrentUser( currentUser );\n\t};\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request. If requesting specific\n *                                 fields, fields must always include the ID.\n */\nexport const getEntityRecord =\n\t( kind, name, key = '', query ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name, key ],\n\t\t\t{ exclusive: false }\n\t\t);\n\n\t\ttry {\n\t\t\tif ( query !== undefined && query._fields ) {\n\t\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t\t// the ID.\n\t\t\t\tquery = {\n\t\t\t\t\t...query,\n\t\t\t\t\t_fields: [\n\t\t\t\t\t\t...new Set( [\n\t\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\n\t\t\t\t\t\t\t\t[] ),\n\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t\t] ),\n\t\t\t\t\t].join(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Disable reason: While true that an early return could leave `path`\n\t\t\t// unused, it's important that path is derived using the query prior to\n\t\t\t// additional query modifications in the condition below, since those\n\t\t\t// modifications are relevant to how the data is tracked in state, and not\n\t\t\t// for how the request is made to the REST API.\n\n\t\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\t\tconst path = addQueryArgs(\n\t\t\t\tentityConfig.baseURL + ( key ? '/' + key : '' ),\n\t\t\t\t{\n\t\t\t\t\t...entityConfig.baseURLParams,\n\t\t\t\t\t...query,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif ( query !== undefined ) {\n\t\t\t\tquery = { ...query, include: [ key ] };\n\n\t\t\t\t// The resolution cache won't consider query as reusable based on the\n\t\t\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\t\t\tconst hasRecords = select.hasEntityRecords( kind, name, query );\n\t\t\t\tif ( hasRecords ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst record = await apiFetch( { path } );\n\t\t\tdispatch.receiveEntityRecords( kind, name, record, query );\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {Object?} query Query Object. If requesting specific fields, fields\n *                        must always include the ID.\n */\nexport const getEntityRecords =\n\t( kind, name, query = {} ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\t\tif ( ! entityConfig || entityConfig?.__experimentalNoFetch ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\t\tSTORE_NAME,\n\t\t\t[ 'entities', 'records', kind, name ],\n\t\t\t{ exclusive: false }\n\t\t);\n\n\t\ttry {\n\t\t\tif ( query._fields ) {\n\t\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t\t// the ID.\n\t\t\t\tquery = {\n\t\t\t\t\t...query,\n\t\t\t\t\t_fields: [\n\t\t\t\t\t\t...new Set( [\n\t\t\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) ||\n\t\t\t\t\t\t\t\t[] ),\n\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t\t\t] ),\n\t\t\t\t\t].join(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst path = addQueryArgs( entityConfig.baseURL, {\n\t\t\t\t...entityConfig.baseURLParams,\n\t\t\t\t...query,\n\t\t\t} );\n\n\t\t\tlet records = Object.values( await apiFetch( { path } ) );\n\t\t\t// If we request fields but the result doesn't contain the fields,\n\t\t\t// explicitely set these fields as \"undefined\"\n\t\t\t// that way we consider the query \"fullfilled\".\n\t\t\tif ( query._fields ) {\n\t\t\t\trecords = records.map( ( record ) => {\n\t\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn record;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tdispatch.receiveEntityRecords( kind, name, records, query );\n\n\t\t\t// When requesting all fields, the list of results can be used to\n\t\t\t// resolve the `getEntityRecord` selector in addition to `getEntityRecords`.\n\t\t\t// See https://github.com/WordPress/gutenberg/pull/26575\n\t\t\tif ( ! query?._fields && ! query.context ) {\n\t\t\t\tconst key = entityConfig.key || DEFAULT_ENTITY_KEY;\n\t\t\t\tconst resolutionsArgs = records\n\t\t\t\t\t.filter( ( record ) => record[ key ] )\n\t\t\t\t\t.map( ( record ) => [ kind, name, record[ key ] ] );\n\n\t\t\t\tdispatch( {\n\t\t\t\t\ttype: 'START_RESOLUTIONS',\n\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t} );\n\t\t\t\tdispatch( {\n\t\t\t\t\ttype: 'FINISH_RESOLUTIONS',\n\t\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\t\targs: resolutionsArgs,\n\t\t\t\t} );\n\t\t\t}\n\t\t} finally {\n\t\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t\t}\n\t};\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport const getCurrentTheme =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t\t'root',\n\t\t\t'theme',\n\t\t\t{ status: 'active' }\n\t\t);\n\n\t\tdispatch.receiveCurrentTheme( activeThemes[ 0 ] );\n\t};\n\n/**\n * Requests theme supports data from the index.\n */\nexport const getThemeSupports = forwardResolver( 'getCurrentTheme' );\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url URL to get the preview for.\n */\nexport const getEmbedPreview =\n\t( url ) =>\n\tasync ( { dispatch } ) => {\n\t\ttry {\n\t\t\tconst embedProxyResponse = await apiFetch( {\n\t\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t\t} );\n\t\t\tdispatch.receiveEmbedPreview( url, embedProxyResponse );\n\t\t} catch ( error ) {\n\t\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\t\tdispatch.receiveEmbedPreview( url, false );\n\t\t}\n\t};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport const canUser =\n\t( action, resource, id ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst methods = {\n\t\t\tcreate: 'POST',\n\t\t\tread: 'GET',\n\t\t\tupdate: 'PUT',\n\t\t\tdelete: 'DELETE',\n\t\t};\n\n\t\tconst method = methods[ action ];\n\t\tif ( ! method ) {\n\t\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t\t}\n\n\t\tconst path = id\n\t\t\t? `/wp/v2/${ resource }/${ id }`\n\t\t\t: `/wp/v2/${ resource }`;\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await apiFetch( {\n\t\t\t\tpath,\n\t\t\t\tmethod: 'OPTIONS',\n\t\t\t\tparse: false,\n\t\t\t} );\n\t\t} catch ( error ) {\n\t\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\t\treturn;\n\t\t}\n\n\t\t// Optional chaining operator is used here because the API requests don't\n\t\t// return the expected result in the native version. Instead, API requests\n\t\t// only return the result, without including response properties like the headers.\n\t\tconst allowHeader = response.headers?.get( 'allow' );\n\t\tconst key = [ action, resource, id ].filter( Boolean ).join( '/' );\n\t\tconst isAllowed =\n\t\t\tallowHeader?.includes?.( method ) || allowHeader?.allow === method;\n\t\tdispatch.receiveUserPermission( key, isAllowed );\n\t};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {string} recordId Record's id.\n */\nexport const canUserEditEntityRecord =\n\t( kind, name, recordId ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst configs = await dispatch( getOrLoadEntitiesConfig( kind ) );\n\t\tconst entityConfig = configs.find(\n\t\t\t( config ) => config.name === name && config.kind === kind\n\t\t);\n\t\tif ( ! entityConfig ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst resource = entityConfig.__unstable_rest_base;\n\t\tawait dispatch( canUser( 'update', resource, recordId ) );\n\t};\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosaves =\n\t( postType, postId ) =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst { rest_base: restBase, rest_namespace: restNamespace = 'wp/v2' } =\n\t\t\tawait resolveSelect.getPostType( postType );\n\t\tconst autosaves = await apiFetch( {\n\t\t\tpath: `/${ restNamespace }/${ restBase }/${ postId }/autosaves?context=edit`,\n\t\t} );\n\n\t\tif ( autosaves && autosaves.length ) {\n\t\t\tdispatch.receiveAutosaves( postId, autosaves );\n\t\t}\n\t};\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosave =\n\t( postType, postId ) =>\n\tasync ( { resolveSelect } ) => {\n\t\tawait resolveSelect.getAutosaves( postType, postId );\n\t};\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {string} link Link.\n */\nexport const __experimentalGetTemplateForLink =\n\t( link ) =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\t// Ideally this should be using an apiFetch call\n\t\t// We could potentially do so by adding a \"filter\" to the `wp_template` end point.\n\t\t// Also it seems the returned object is not a regular REST API post type.\n\t\tlet template;\n\t\ttry {\n\t\t\ttemplate = await window\n\t\t\t\t.fetch( addQueryArgs( link, { '_wp-find-template': true } ) )\n\t\t\t\t.then( ( res ) => res.json() )\n\t\t\t\t.then( ( { data } ) => data );\n\t\t} catch ( e ) {\n\t\t\t// For non-FSE themes, it is possible that this request returns an error.\n\t\t}\n\n\t\tif ( ! template ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst record = await resolveSelect.getEntityRecord(\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\n\t\tif ( record ) {\n\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t'postType',\n\t\t\t\t'wp_template',\n\t\t\t\t[ record ],\n\t\t\t\t{\n\t\t\t\t\t'find-template': link,\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t};\n\n__experimentalGetTemplateForLink.shouldInvalidate = ( action ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\taction.kind === 'postType' &&\n\t\taction.name === 'wp_template'\n\t);\n};\n\nexport const __experimentalGetCurrentGlobalStylesId =\n\t() =>\n\tasync ( { dispatch, resolveSelect } ) => {\n\t\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t\t'root',\n\t\t\t'theme',\n\t\t\t{ status: 'active' }\n\t\t);\n\t\tconst globalStylesURL =\n\t\t\tactiveThemes?.[ 0 ]?._links?.[ 'wp:user-global-styles' ]?.[ 0 ]\n\t\t\t\t?.href;\n\t\tif ( globalStylesURL ) {\n\t\t\tconst globalStylesObject = await apiFetch( {\n\t\t\t\turl: globalStylesURL,\n\t\t\t} );\n\t\t\tdispatch.__experimentalReceiveCurrentGlobalStylesId(\n\t\t\t\tglobalStylesObject.id\n\t\t\t);\n\t\t}\n\t};\n\nexport const __experimentalGetCurrentThemeBaseGlobalStyles =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\t\tconst themeGlobalStyles = await apiFetch( {\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }`,\n\t\t} );\n\t\tdispatch.__experimentalReceiveThemeBaseGlobalStyles(\n\t\t\tcurrentTheme.stylesheet,\n\t\t\tthemeGlobalStyles\n\t\t);\n\t};\n\nexport const __experimentalGetCurrentThemeGlobalStylesVariations =\n\t() =>\n\tasync ( { resolveSelect, dispatch } ) => {\n\t\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\t\tconst variations = await apiFetch( {\n\t\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }/variations`,\n\t\t} );\n\t\tdispatch.__experimentalReceiveThemeGlobalStyleVariations(\n\t\t\tcurrentTheme.stylesheet,\n\t\t\tvariations\n\t\t);\n\t};\n\nexport const getBlockPatterns =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst restPatterns = await apiFetch( {\n\t\t\tpath: '/wp/v2/block-patterns/patterns',\n\t\t} );\n\t\tconst patterns = restPatterns?.map( ( pattern ) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries( pattern ).map( ( [ key, value ] ) => [\n\t\t\t\t\tcamelCase( key ),\n\t\t\t\t\tvalue,\n\t\t\t\t] )\n\t\t\t)\n\t\t);\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERNS', patterns } );\n\t};\n\nexport const getBlockPatternCategories =\n\t() =>\n\tasync ( { dispatch } ) => {\n\t\tconst categories = await apiFetch( {\n\t\t\tpath: '/wp/v2/block-patterns/categories',\n\t\t} );\n\t\tdispatch( { type: 'RECEIVE_BLOCK_PATTERN_CATEGORIES', categories } );\n\t};\n","export function deepCopyLocksTreePath( tree, path ) {\n\tconst newTree = { ...tree };\n\tlet currentNode = newTree;\n\tfor ( const branchName of path ) {\n\t\tcurrentNode.children = {\n\t\t\t...currentNode.children,\n\t\t\t[ branchName ]: {\n\t\t\t\tlocks: [],\n\t\t\t\tchildren: {},\n\t\t\t\t...currentNode.children[ branchName ],\n\t\t\t},\n\t\t};\n\t\tcurrentNode = currentNode.children[ branchName ];\n\t}\n\treturn newTree;\n}\n\nexport function getNode( tree, path ) {\n\tlet currentNode = tree;\n\tfor ( const branchName of path ) {\n\t\tconst nextNode = currentNode.children[ branchName ];\n\t\tif ( ! nextNode ) {\n\t\t\treturn null;\n\t\t}\n\t\tcurrentNode = nextNode;\n\t}\n\treturn currentNode;\n}\n\nexport function* iteratePath( tree, path ) {\n\tlet currentNode = tree;\n\tyield currentNode;\n\tfor ( const branchName of path ) {\n\t\tconst nextNode = currentNode.children[ branchName ];\n\t\tif ( ! nextNode ) {\n\t\t\tbreak;\n\t\t}\n\t\tyield nextNode;\n\t\tcurrentNode = nextNode;\n\t}\n}\n\nexport function* iterateDescendants( node ) {\n\tconst stack = Object.values( node.children );\n\twhile ( stack.length ) {\n\t\tconst childNode = stack.pop();\n\t\tyield childNode;\n\t\tstack.push( ...Object.values( childNode.children ) );\n\t}\n}\n\nexport function hasConflictingLock( { exclusive }, locks ) {\n\tif ( exclusive && locks.length ) {\n\t\treturn true;\n\t}\n\n\tif ( ! exclusive && locks.filter( ( lock ) => lock.exclusive ).length ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * Internal dependencies\n */\nimport { getNode, deepCopyLocksTreePath } from './utils';\n\nconst DEFAULT_STATE = {\n\trequests: [],\n\ttree: {\n\t\tlocks: [],\n\t\tchildren: {},\n\t},\n};\n\n/**\n * Reducer returning locks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport default function locks( state = DEFAULT_STATE, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENQUEUE_LOCK_REQUEST': {\n\t\t\tconst { request } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trequests: [ request, ...state.requests ],\n\t\t\t};\n\t\t}\n\t\tcase 'GRANT_LOCK_REQUEST': {\n\t\t\tconst { lock, request } = action;\n\t\t\tconst { store, path } = request;\n\t\t\tconst storePath = [ store, ...path ];\n\n\t\t\tconst newTree = deepCopyLocksTreePath( state.tree, storePath );\n\t\t\tconst node = getNode( newTree, storePath );\n\t\t\tnode.locks = [ ...node.locks, lock ];\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trequests: state.requests.filter( ( r ) => r !== request ),\n\t\t\t\ttree: newTree,\n\t\t\t};\n\t\t}\n\t\tcase 'RELEASE_LOCK': {\n\t\t\tconst { lock } = action;\n\t\t\tconst storePath = [ lock.store, ...lock.path ];\n\n\t\t\tconst newTree = deepCopyLocksTreePath( state.tree, storePath );\n\t\t\tconst node = getNode( newTree, storePath );\n\t\t\tnode.locks = node.locks.filter( ( l ) => l !== lock );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttree: newTree,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn state;\n}\n","/**\n * Internal dependencies\n */\nimport {\n\titerateDescendants,\n\titeratePath,\n\thasConflictingLock,\n\tgetNode,\n} from './utils';\n\nexport function getPendingLockRequests( state ) {\n\treturn state.requests;\n}\n\nexport function isLockAvailable( state, store, path, { exclusive } ) {\n\tconst storePath = [ store, ...path ];\n\tconst locks = state.tree;\n\n\t// Validate all parents and the node itself\n\tfor ( const node of iteratePath( locks, storePath ) ) {\n\t\tif ( hasConflictingLock( { exclusive }, node.locks ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// iteratePath terminates early if path is unreachable, let's\n\t// re-fetch the node and check it exists in the tree.\n\tconst node = getNode( locks, storePath );\n\tif ( ! node ) {\n\t\treturn true;\n\t}\n\n\t// Validate all nested nodes\n\tfor ( const descendant of iterateDescendants( node ) ) {\n\t\tif ( hasConflictingLock( { exclusive }, descendant.locks ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n","/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport { isLockAvailable, getPendingLockRequests } from './selectors';\n\nexport default function createLocks() {\n\tlet state = reducer( undefined, { type: '@@INIT' } );\n\n\tfunction processPendingLockRequests() {\n\t\tfor ( const request of getPendingLockRequests( state ) ) {\n\t\t\tconst { store, path, exclusive, notifyAcquired } = request;\n\t\t\tif ( isLockAvailable( state, store, path, { exclusive } ) ) {\n\t\t\t\tconst lock = { store, path, exclusive };\n\t\t\t\tstate = reducer( state, {\n\t\t\t\t\ttype: 'GRANT_LOCK_REQUEST',\n\t\t\t\t\tlock,\n\t\t\t\t\trequest,\n\t\t\t\t} );\n\t\t\t\tnotifyAcquired( lock );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction acquire( store, path, exclusive ) {\n\t\treturn new Promise( ( resolve ) => {\n\t\t\tstate = reducer( state, {\n\t\t\t\ttype: 'ENQUEUE_LOCK_REQUEST',\n\t\t\t\trequest: { store, path, exclusive, notifyAcquired: resolve },\n\t\t\t} );\n\t\t\tprocessPendingLockRequests();\n\t\t} );\n\t}\n\tfunction release( lock ) {\n\t\tstate = reducer( state, {\n\t\t\ttype: 'RELEASE_LOCK',\n\t\t\tlock,\n\t\t} );\n\t\tprocessPendingLockRequests();\n\t}\n\n\treturn { acquire, release };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","/**\n * WordPress dependencies\n */\nimport {\n\tcreateContext,\n\tuseContext,\n\tuseCallback,\n\tuseEffect,\n} from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { parse, __unstableSerializeAndClean } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\n\n/** @typedef {import('@wordpress/blocks').WPBlock} WPBlock */\n\nconst EMPTY_ARRAY = [];\n\n/**\n * Internal dependencies\n */\nimport { rootEntitiesConfig, additionalEntityConfigLoaders } from './entities';\n\nconst entityContexts = {\n\t...rootEntitiesConfig.reduce( ( acc, loader ) => {\n\t\tif ( ! acc[ loader.kind ] ) {\n\t\t\tacc[ loader.kind ] = {};\n\t\t}\n\t\tacc[ loader.kind ][ loader.name ] = {\n\t\t\tcontext: createContext( undefined ),\n\t\t};\n\t\treturn acc;\n\t}, {} ),\n\t...additionalEntityConfigLoaders.reduce( ( acc, loader ) => {\n\t\tacc[ loader.kind ] = {};\n\t\treturn acc;\n\t}, {} ),\n};\nconst getEntityContext = ( kind, name ) => {\n\tif ( ! entityContexts[ kind ] ) {\n\t\tthrow new Error( `Missing entity config for kind: ${ kind }.` );\n\t}\n\n\tif ( ! entityContexts[ kind ][ name ] ) {\n\t\tentityContexts[ kind ][ name ] = {\n\t\t\tcontext: createContext( undefined ),\n\t\t};\n\t}\n\n\treturn entityContexts[ kind ][ name ].context;\n};\n\n/**\n * Context provider component for providing\n * an entity for a specific entity.\n *\n * @param {Object} props          The component's props.\n * @param {string} props.kind     The entity kind.\n * @param {string} props.type     The entity name.\n * @param {number} props.id       The entity ID.\n * @param {*}      props.children The children to wrap.\n *\n * @return {Object} The provided children, wrapped with\n *                   the entity's context provider.\n */\nexport default function EntityProvider( { kind, type: name, id, children } ) {\n\tconst Provider = getEntityContext( kind, name ).Provider;\n\treturn <Provider value={ id }>{ children }</Provider>;\n}\n\n/**\n * Hook that returns the ID for the nearest\n * provided entity of the specified type.\n *\n * @param {string} kind The entity kind.\n * @param {string} name The entity name.\n */\nexport function useEntityId( kind, name ) {\n\treturn useContext( getEntityContext( kind, name ) );\n}\n\n/**\n * Hook that returns the value and a setter for the\n * specified property of the nearest provided\n * entity of the specified type.\n *\n * @param {string} kind  The entity kind.\n * @param {string} name  The entity name.\n * @param {string} prop  The property name.\n * @param {string} [_id] An entity ID to use instead of the context-provided one.\n *\n * @return {[*, Function, *]} An array where the first item is the\n *                            property value, the second is the\n *                            setter and the third is the full value\n * \t\t\t\t\t\t\t  object from REST API containing more\n * \t\t\t\t\t\t\t  information like `raw`, `rendered` and\n * \t\t\t\t\t\t\t  `protected` props.\n */\nexport function useEntityProp( kind, name, prop, _id ) {\n\tconst providerId = useEntityId( kind, name );\n\tconst id = _id ?? providerId;\n\n\tconst { value, fullValue } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getEntityRecord, getEditedEntityRecord } =\n\t\t\t\tselect( STORE_NAME );\n\t\t\tconst record = getEntityRecord( kind, name, id ); // Trigger resolver.\n\t\t\tconst editedRecord = getEditedEntityRecord( kind, name, id );\n\t\t\treturn record && editedRecord\n\t\t\t\t? {\n\t\t\t\t\t\tvalue: editedRecord[ prop ],\n\t\t\t\t\t\tfullValue: record[ prop ],\n\t\t\t\t  }\n\t\t\t\t: {};\n\t\t},\n\t\t[ kind, name, id, prop ]\n\t);\n\tconst { editEntityRecord } = useDispatch( STORE_NAME );\n\tconst setValue = useCallback(\n\t\t( newValue ) => {\n\t\t\teditEntityRecord( kind, name, id, {\n\t\t\t\t[ prop ]: newValue,\n\t\t\t} );\n\t\t},\n\t\t[ kind, name, id, prop ]\n\t);\n\n\treturn [ value, setValue, fullValue ];\n}\n\n/**\n * Hook that returns block content getters and setters for\n * the nearest provided entity of the specified type.\n *\n * The return value has the shape `[ blocks, onInput, onChange ]`.\n * `onInput` is for block changes that don't create undo levels\n * or dirty the post, non-persistent changes, and `onChange` is for\n * peristent changes. They map directly to the props of a\n * `BlockEditorProvider` and are intended to be used with it,\n * or similar components or hooks.\n *\n * @param {string} kind         The entity kind.\n * @param {string} name         The entity name.\n * @param {Object} options\n * @param {string} [options.id] An entity ID to use instead of the context-provided one.\n *\n * @return {[WPBlock[], Function, Function]} The block array and setters.\n */\nexport function useEntityBlockEditor( kind, name, { id: _id } = {} ) {\n\tconst providerId = useEntityId( kind, name );\n\tconst id = _id ?? providerId;\n\tconst { content, blocks } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getEditedEntityRecord } = select( STORE_NAME );\n\t\t\tconst editedRecord = getEditedEntityRecord( kind, name, id );\n\t\t\treturn {\n\t\t\t\tblocks: editedRecord.blocks,\n\t\t\t\tcontent: editedRecord.content,\n\t\t\t};\n\t\t},\n\t\t[ kind, name, id ]\n\t);\n\tconst { __unstableCreateUndoLevel, editEntityRecord } =\n\t\tuseDispatch( STORE_NAME );\n\n\tuseEffect( () => {\n\t\t// Load the blocks from the content if not already in state\n\t\t// Guard against other instances that might have\n\t\t// set content to a function already or the blocks are already in state.\n\t\tif ( content && typeof content !== 'function' && ! blocks ) {\n\t\t\tconst parsedContent = parse( content );\n\t\t\teditEntityRecord(\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\tid,\n\t\t\t\t{\n\t\t\t\t\tblocks: parsedContent,\n\t\t\t\t},\n\t\t\t\t{ undoIgnore: true }\n\t\t\t);\n\t\t}\n\t}, [ content ] );\n\n\tconst onChange = useCallback(\n\t\t( newBlocks, options ) => {\n\t\t\tconst { selection } = options;\n\t\t\tconst edits = { blocks: newBlocks, selection };\n\n\t\t\tconst noChange = blocks === edits.blocks;\n\t\t\tif ( noChange ) {\n\t\t\t\treturn __unstableCreateUndoLevel( kind, name, id );\n\t\t\t}\n\n\t\t\t// We create a new function here on every persistent edit\n\t\t\t// to make sure the edit makes the post dirty and creates\n\t\t\t// a new undo level.\n\t\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\t\t__unstableSerializeAndClean( blocksForSerialization );\n\n\t\t\teditEntityRecord( kind, name, id, edits );\n\t\t},\n\t\t[ kind, name, id, blocks ]\n\t);\n\n\tconst onInput = useCallback(\n\t\t( newBlocks, options ) => {\n\t\t\tconst { selection } = options;\n\t\t\tconst edits = { blocks: newBlocks, selection };\n\t\t\teditEntityRecord( kind, name, id, edits );\n\t\t},\n\t\t[ kind, name, id ]\n\t);\n\n\treturn [ blocks ?? EMPTY_ARRAY, onInput, onChange ];\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"htmlEntities\"];","/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Filters the search by type\n *\n * @typedef { 'attachment' | 'post' | 'term' | 'post-format' } WPLinkSearchType\n */\n\n/**\n * A link with an id may be of kind post-type or taxonomy\n *\n * @typedef { 'post-type' | 'taxonomy' } WPKind\n */\n\n/**\n * @typedef WPLinkSearchOptions\n *\n * @property {boolean}          [isInitialSuggestions] Displays initial search suggestions, when true.\n * @property {WPLinkSearchType} [type]                 Filters by search type.\n * @property {string}           [subtype]              Slug of the post-type or taxonomy.\n * @property {number}           [page]                 Which page of results to return.\n * @property {number}           [perPage]              Search results per page.\n */\n\n/**\n * @typedef WPLinkSearchResult\n *\n * @property {number} id     Post or term id.\n * @property {string} url    Link url.\n * @property {string} title  Title of the link.\n * @property {string} type   The taxonomy or post type slug or type URL.\n * @property {WPKind} [kind] Link kind of post-type or taxonomy\n */\n\n/**\n * @typedef WPLinkSearchResultAugments\n *\n * @property {{kind: WPKind}} [meta]    Contains kind information.\n * @property {WPKind}         [subtype] Optional subtype if it exists.\n */\n\n/**\n * @typedef {WPLinkSearchResult & WPLinkSearchResultAugments} WPLinkSearchResultAugmented\n */\n\n/**\n * @typedef WPEditorSettings\n *\n * @property {boolean} [ disablePostFormats ] Disables post formats, when true.\n */\n\n/**\n * Fetches link suggestions from the API.\n *\n * @async\n * @param {string}              search\n * @param {WPLinkSearchOptions} [searchOptions]\n * @param {WPEditorSettings}    [settings]\n *\n * @example\n * ```js\n * import { __experimentalFetchLinkSuggestions as fetchLinkSuggestions } from '@wordpress/core-data';\n *\n * //...\n *\n * export function initialize( id, settings ) {\n *\n * settings.__experimentalFetchLinkSuggestions = (\n *     search,\n *     searchOptions\n * ) => fetchLinkSuggestions( search, searchOptions, settings );\n * ```\n * @return {Promise< WPLinkSearchResult[] >} List of search suggestions\n */\nconst fetchLinkSuggestions = async (\n\tsearch,\n\tsearchOptions = {},\n\tsettings = {}\n) => {\n\tconst {\n\t\tisInitialSuggestions = false,\n\t\ttype = undefined,\n\t\tsubtype = undefined,\n\t\tpage = undefined,\n\t\tperPage = isInitialSuggestions ? 3 : 20,\n\t} = searchOptions;\n\n\tconst { disablePostFormats = false } = settings;\n\n\t/** @type {Promise<WPLinkSearchResult>[]} */\n\tconst queries = [];\n\n\tif ( ! type || type === 'post' ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t\ttype: 'post',\n\t\t\t\t\tsubtype,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'post-type', subtype },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\n\t\t);\n\t}\n\n\tif ( ! type || type === 'term' ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t\ttype: 'term',\n\t\t\t\t\tsubtype,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'taxonomy', subtype },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\n\t\t);\n\t}\n\n\tif ( ! disablePostFormats && ( ! type || type === 'post-format' ) ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t\ttype: 'post-format',\n\t\t\t\t\tsubtype,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'taxonomy', subtype },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\n\t\t);\n\t}\n\n\tif ( ! type || type === 'attachment' ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/media', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'media' },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\n\t\t);\n\t}\n\n\treturn Promise.all( queries ).then( ( results ) => {\n\t\treturn results\n\t\t\t.reduce(\n\t\t\t\t( /** @type {WPLinkSearchResult[]} */ accumulator, current ) =>\n\t\t\t\t\taccumulator.concat( current ), // Flatten list.\n\t\t\t\t[]\n\t\t\t)\n\t\t\t.filter(\n\t\t\t\t/**\n\t\t\t\t * @param {{ id: number }} result\n\t\t\t\t */\n\t\t\t\t( result ) => {\n\t\t\t\t\treturn !! result.id;\n\t\t\t\t}\n\t\t\t)\n\t\t\t.slice( 0, perPage )\n\t\t\t.map( ( /** @type {WPLinkSearchResultAugmented} */ result ) => {\n\t\t\t\tconst isMedia = result.type === 'attachment';\n\n\t\t\t\treturn {\n\t\t\t\t\tid: result.id,\n\t\t\t\t\t// @ts-ignore fix when we make this a TS file\n\t\t\t\t\turl: isMedia ? result.source_url : result.url,\n\t\t\t\t\ttitle:\n\t\t\t\t\t\tdecodeEntities(\n\t\t\t\t\t\t\tisMedia\n\t\t\t\t\t\t\t\t? // @ts-ignore fix when we make this a TS file\n\t\t\t\t\t\t\t\t  result.title.rendered\n\t\t\t\t\t\t\t\t: result.title || ''\n\t\t\t\t\t\t) || __( '(no title)' ),\n\t\t\t\t\ttype: result.subtype || result.type,\n\t\t\t\t\tkind: result?.meta?.kind,\n\t\t\t\t};\n\t\t\t} );\n\t} );\n};\n\nexport default fetchLinkSuggestions;\n","/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport {\n\taddQueryArgs,\n\tprependHTTP,\n\tisURL,\n\tgetProtocol,\n\tisValidProtocol,\n} from '@wordpress/url';\n\n/**\n * A simple in-memory cache for requests.\n * This avoids repeat HTTP requests which may be beneficial\n * for those wishing to preserve low-bandwidth.\n */\nconst CACHE = new Map();\n\n/**\n * @typedef WPRemoteUrlData\n *\n * @property {string} title contents of the remote URL's `<title>` tag.\n */\n\n/**\n * Fetches data about a remote URL.\n * eg: <title> tag, favicon...etc.\n *\n * @async\n * @param {string}  url     the URL to request details from.\n * @param {Object?} options any options to pass to the underlying fetch.\n * @example\n * ```js\n * import { __experimentalFetchUrlData as fetchUrlData } from '@wordpress/core-data';\n *\n * //...\n *\n * export function initialize( id, settings ) {\n *\n * settings.__experimentalFetchUrlData = (\n * url\n * ) => fetchUrlData( url );\n * ```\n * @return {Promise< WPRemoteUrlData[] >} Remote URL data.\n */\nconst fetchUrlData = async ( url, options = {} ) => {\n\tconst endpoint = '/wp-block-editor/v1/url-details';\n\n\tconst args = {\n\t\turl: prependHTTP( url ),\n\t};\n\n\tif ( ! isURL( url ) ) {\n\t\treturn Promise.reject( `${ url } is not a valid URL.` );\n\t}\n\n\t// Test for \"http\" based URL as it is possible for valid\n\t// yet unusable URLs such as `tel:123456` to be passed.\n\tconst protocol = getProtocol( url );\n\n\tif (\n\t\t! protocol ||\n\t\t! isValidProtocol( protocol ) ||\n\t\t! protocol.startsWith( 'http' ) ||\n\t\t! /^https?:\\/\\/[^\\/\\s]/i.test( url )\n\t) {\n\t\treturn Promise.reject(\n\t\t\t`${ url } does not have a valid protocol. URLs must be \"http\" based`\n\t\t);\n\t}\n\n\tif ( CACHE.has( url ) ) {\n\t\treturn CACHE.get( url );\n\t}\n\n\treturn apiFetch( {\n\t\tpath: addQueryArgs( endpoint, args ),\n\t\t...options,\n\t} ).then( ( res ) => {\n\t\tCACHE.set( url, res );\n\t\treturn res;\n\t} );\n};\n\nexport default fetchUrlData;\n","/**\n * External dependencies\n */\nimport memoize from 'memize';\n\n// re-export due to restrictive esModuleInterop setting\nexport default memoize;\n","export const enum Status {\n\tIdle = 'IDLE',\n\tResolving = 'RESOLVING',\n\tError = 'ERROR',\n\tSuccess = 'SUCCESS',\n}\n","/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport memoize from './memoize';\nimport { Status } from './constants';\n\nexport const META_SELECTORS = [\n\t'getIsResolving',\n\t'hasStartedResolution',\n\t'hasFinishedResolution',\n\t'isResolving',\n\t'getCachedResolvers',\n];\n\ninterface QuerySelectResponse< Data > {\n\t/** the requested selector return value */\n\tdata: Data;\n\n\t/** is the record still being resolved? Via the `getIsResolving` meta-selector */\n\tisResolving: boolean;\n\n\t/** was the resolution started? Via the `hasStartedResolution` meta-selector */\n\thasStarted: boolean;\n\n\t/** has the resolution finished? Via the `hasFinishedResolution` meta-selector. */\n\thasResolved: boolean;\n}\n\n/**\n * Like useSelect, but the selectors return objects containing\n * both the original data AND the resolution info.\n *\n * @param {Function} mapQuerySelect see useSelect\n * @param {Array}    deps           see useSelect\n *\n * @example\n * ```js\n * import { useQuerySelect } from '@wordpress/data';\n * import { store as coreDataStore } from '@wordpress/core-data';\n *\n * function PageTitleDisplay( { id } ) {\n *   const { data: page, isResolving } = useQuerySelect( ( query ) => {\n *     return query( coreDataStore ).getEntityRecord( 'postType', 'page', id )\n *   }, [ id ] );\n *\n *   if ( isResolving ) {\n *     return 'Loading...';\n *   }\n *\n *   return page.title;\n * }\n *\n * // Rendered in the application:\n * // <PageTitleDisplay id={ 10 } />\n * ```\n *\n * In the above example, when `PageTitleDisplay` is rendered into an\n * application, the page and the resolution details will be retrieved from\n * the store state using the `mapSelect` callback on `useQuerySelect`.\n *\n * If the id prop changes then any page in the state for that id is\n * retrieved. If the id prop doesn't change and other props are passed in\n * that do change, the title will not change because the dependency is just\n * the id.\n * @see useSelect\n *\n * @return {QuerySelectResponse} Queried data.\n */\nexport default function __experimentalUseQuerySelect( mapQuerySelect, deps ) {\n\treturn useSelect( ( select, registry ) => {\n\t\tconst resolve = ( store ) => enrichSelectors( select( store ) );\n\t\treturn mapQuerySelect( resolve, registry );\n\t}, deps );\n}\n\ninterface EnrichedSelectors {\n\t< Selectors extends Record< string, ( ...args: any[] ) => any > >(\n\t\tselectors: Selectors\n\t): {\n\t\t[ Selector in keyof Selectors ]: (\n\t\t\t...args: Parameters< Selectors[ Selector ] >\n\t\t) => QuerySelectResponse< ReturnType< Selectors[ Selector ] > >;\n\t};\n}\n\n/**\n * Transform simple selectors into ones that return an object with the\n * original return value AND the resolution info.\n *\n * @param {Object} selectors Selectors to enrich\n * @return {EnrichedSelectors} Enriched selectors\n */\nconst enrichSelectors = memoize( ( ( selectors ) => {\n\tconst resolvers = {};\n\tfor ( const selectorName in selectors ) {\n\t\tif ( META_SELECTORS.includes( selectorName ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tObject.defineProperty( resolvers, selectorName, {\n\t\t\tget:\n\t\t\t\t() =>\n\t\t\t\t( ...args: unknown[] ) => {\n\t\t\t\t\tconst { getIsResolving, hasFinishedResolution } = selectors;\n\t\t\t\t\tconst isResolving = !! getIsResolving( selectorName, args );\n\t\t\t\t\tconst hasResolved =\n\t\t\t\t\t\t! isResolving &&\n\t\t\t\t\t\thasFinishedResolution( selectorName, args );\n\t\t\t\t\tconst data = selectors[ selectorName ]( ...args );\n\n\t\t\t\t\tlet status;\n\t\t\t\t\tif ( isResolving ) {\n\t\t\t\t\t\tstatus = Status.Resolving;\n\t\t\t\t\t} else if ( hasResolved ) {\n\t\t\t\t\t\tif ( data ) {\n\t\t\t\t\t\t\tstatus = Status.Success;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstatus = Status.Error;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstatus = Status.Idle;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tisResolving,\n\t\t\t\t\t\thasResolved,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t} );\n\t}\n\treturn resolvers;\n} ) as EnrichedSelectors );\n","/**\n * WordPress dependencies\n */\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\nimport { useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport useQuerySelect from './use-query-select';\nimport { store as coreStore } from '../';\nimport type { Status } from './constants';\n\nexport interface EntityRecordResolution< RecordType > {\n\t/** The requested entity record */\n\trecord: RecordType | null;\n\n\t/** The edited entity record */\n\teditedRecord: Partial< RecordType >;\n\n\t/** Apply local (in-browser) edits to the edited entity record */\n\tedit: ( diff: Partial< RecordType > ) => void;\n\n\t/** Persist the edits to the server */\n\tsave: () => Promise< void >;\n\n\t/**\n\t * Is the record still being resolved?\n\t */\n\tisResolving: boolean;\n\n\t/**\n\t * Does the record have any local edits?\n\t */\n\thasEdits: boolean;\n\n\t/**\n\t * Is the record resolved by now?\n\t */\n\thasResolved: boolean;\n\n\t/** Resolution status */\n\tstatus: Status;\n}\n\nexport interface Options {\n\t/**\n\t * Whether to run the query or short-circuit and return null.\n\t *\n\t * @default true\n\t */\n\tenabled: boolean;\n}\n\n/**\n * Resolves the specified entity record.\n *\n * @param  kind     Kind of the entity, e.g. `root` or a `postType`. See rootEntitiesConfig in ../entities.ts for a list of available kinds.\n * @param  name     Name of the entity, e.g. `plugin` or a `post`. See rootEntitiesConfig in ../entities.ts for a list of available names.\n * @param  recordId ID of the requested entity record.\n * @param  options  Optional hook options.\n * @example\n * ```js\n * import { useEntityRecord } from '@wordpress/core-data';\n *\n * function PageTitleDisplay( { id } ) {\n *   const { record, isResolving } = useEntityRecord( 'postType', 'page', id );\n *\n *   if ( isResolving ) {\n *     return 'Loading...';\n *   }\n *\n *   return record.title;\n * }\n *\n * // Rendered in the application:\n * // <PageTitleDisplay id={ 1 } />\n * ```\n *\n * In the above example, when `PageTitleDisplay` is rendered into an\n * application, the page and the resolution details will be retrieved from\n * the store state using `getEntityRecord()`, or resolved if missing.\n *\n * @example\n * ```js\n * import { useDispatch } from '@wordpress/data';\n * import { useCallback } from '@wordpress/element';\n * import { __ } from '@wordpress/i18n';\n * import { TextControl } from '@wordpress/components';\n * import { store as noticeStore } from '@wordpress/notices';\n * import { useEntityRecord } from '@wordpress/core-data';\n *\n * function PageRenameForm( { id } ) {\n * \tconst page = useEntityRecord( 'postType', 'page', id );\n * \tconst { createSuccessNotice, createErrorNotice } =\n * \t\tuseDispatch( noticeStore );\n *\n * \tconst setTitle = useCallback( ( title ) => {\n * \t\tpage.edit( { title } );\n * \t}, [ page.edit ] );\n *\n * \tif ( page.isResolving ) {\n * \t\treturn 'Loading...';\n * \t}\n *\n * \tasync function onRename( event ) {\n * \t\tevent.preventDefault();\n * \t\ttry {\n * \t\t\tawait page.save();\n * \t\t\tcreateSuccessNotice( __( 'Page renamed.' ), {\n * \t\t\t\ttype: 'snackbar',\n * \t\t\t} );\n * \t\t} catch ( error ) {\n * \t\t\tcreateErrorNotice( error.message, { type: 'snackbar' } );\n * \t\t}\n * \t}\n *\n * \treturn (\n * \t\t<form onSubmit={ onRename }>\n * \t\t\t<TextControl\n * \t\t\t\tlabel={ __( 'Name' ) }\n * \t\t\t\tvalue={ page.editedRecord.title }\n * \t\t\t\tonChange={ setTitle }\n * \t\t\t/>\n * \t\t\t<button type=\"submit\">{ __( 'Save' ) }</button>\n * \t\t</form>\n * \t);\n * }\n *\n * // Rendered in the application:\n * // <PageRenameForm id={ 1 } />\n * ```\n *\n * In the above example, updating and saving the page title is handled\n * via the `edit()` and `save()` mutation helpers provided by\n * `useEntityRecord()`;\n *\n * @return Entity record data.\n * @template RecordType\n */\nexport default function useEntityRecord< RecordType >(\n\tkind: string,\n\tname: string,\n\trecordId: string | number,\n\toptions: Options = { enabled: true }\n): EntityRecordResolution< RecordType > {\n\tconst { editEntityRecord, saveEditedEntityRecord } =\n\t\tuseDispatch( coreStore );\n\n\tconst mutations = useMemo(\n\t\t() => ( {\n\t\t\tedit: ( record ) =>\n\t\t\t\teditEntityRecord( kind, name, recordId, record ),\n\t\t\tsave: ( saveOptions: any = {} ) =>\n\t\t\t\tsaveEditedEntityRecord( kind, name, recordId, {\n\t\t\t\t\tthrowOnError: true,\n\t\t\t\t\t...saveOptions,\n\t\t\t\t} ),\n\t\t} ),\n\t\t[ recordId ]\n\t);\n\n\tconst { editedRecord, hasEdits } = useSelect(\n\t\t( select ) => ( {\n\t\t\teditedRecord: select( coreStore ).getEditedEntityRecord(\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId\n\t\t\t),\n\t\t\thasEdits: select( coreStore ).hasEditsForEntityRecord(\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId\n\t\t\t),\n\t\t} ),\n\t\t[ kind, name, recordId ]\n\t);\n\n\tconst { data: record, ...querySelectRest } = useQuerySelect(\n\t\t( query ) => {\n\t\t\tif ( ! options.enabled ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn query( coreStore ).getEntityRecord( kind, name, recordId );\n\t\t},\n\t\t[ kind, name, recordId, options.enabled ]\n\t);\n\n\treturn {\n\t\trecord,\n\t\teditedRecord,\n\t\thasEdits,\n\t\t...querySelectRest,\n\t\t...mutations,\n\t};\n}\n\nexport function __experimentalUseEntityRecord(\n\tkind: string,\n\tname: string,\n\trecordId: any,\n\toptions: any\n) {\n\tdeprecated( `wp.data.__experimentalUseEntityRecord`, {\n\t\talternative: 'wp.data.useEntityRecord',\n\t\tsince: '6.1',\n\t} );\n\treturn useEntityRecord( kind, name, recordId, options );\n}\n","/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport useQuerySelect from './use-query-select';\nimport { store as coreStore } from '../';\nimport type { Options, EntityRecordResolution } from './use-entity-record';\n\ntype EntityRecordsResolution< RecordType > = Omit<\n\tEntityRecordResolution< RecordType >,\n\t'record'\n> & {\n\t/** The requested entity record */\n\trecords: RecordType[] | null;\n};\n\nconst EMPTY_ARRAY = [];\n\n/**\n * Resolves the specified entity records.\n *\n * @param  kind      Kind of the entity, e.g. `root` or a `postType`. See rootEntitiesConfig in ../entities.ts for a list of available kinds.\n * @param  name      Name of the entity, e.g. `plugin` or a `post`. See rootEntitiesConfig in ../entities.ts for a list of available names.\n * @param  queryArgs Optional HTTP query description for how to fetch the data, passed to the requested API endpoint.\n * @param  options   Optional hook options.\n * @example\n * ```js\n * import { useEntityRecord } from '@wordpress/core-data';\n *\n * function PageTitlesList() {\n *   const { records, isResolving } = useEntityRecords( 'postType', 'page' );\n *\n *   if ( isResolving ) {\n *     return 'Loading...';\n *   }\n *\n *   return (\n *     <ul>\n *       {records.map(( page ) => (\n *         <li>{ page.title }</li>\n *       ))}\n *     </ul>\n *   );\n * }\n *\n * // Rendered in the application:\n * // <PageTitlesList />\n * ```\n *\n * In the above example, when `PageTitlesList` is rendered into an\n * application, the list of records and the resolution details will be retrieved from\n * the store state using `getEntityRecords()`, or resolved if missing.\n *\n * @return Entity records data.\n * @template RecordType\n */\nexport default function useEntityRecords< RecordType >(\n\tkind: string,\n\tname: string,\n\tqueryArgs: Record< string, unknown > = {},\n\toptions: Options = { enabled: true }\n): EntityRecordsResolution< RecordType > {\n\t// Serialize queryArgs to a string that can be safely used as a React dep.\n\t// We can't just pass queryArgs as one of the deps, because if it is passed\n\t// as an object literal, then it will be a different object on each call even\n\t// if the values remain the same.\n\tconst queryAsString = addQueryArgs( '', queryArgs );\n\n\tconst { data: records, ...rest } = useQuerySelect(\n\t\t( query ) => {\n\t\t\tif ( ! options.enabled ) {\n\t\t\t\treturn {\n\t\t\t\t\t// Avoiding returning a new reference on every execution.\n\t\t\t\t\tdata: EMPTY_ARRAY,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn query( coreStore ).getEntityRecords( kind, name, queryArgs );\n\t\t},\n\t\t[ kind, name, queryAsString, options.enabled ]\n\t);\n\n\treturn {\n\t\trecords,\n\t\t...rest,\n\t};\n}\n\nexport function __experimentalUseEntityRecords(\n\tkind: string,\n\tname: string,\n\tqueryArgs: any,\n\toptions: any\n) {\n\tdeprecated( `wp.data.__experimentalUseEntityRecords`, {\n\t\talternative: 'wp.data.useEntityRecords',\n\t\tsince: '6.1',\n\t} );\n\treturn useEntityRecords( kind, name, queryArgs, options );\n}\n","/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { store as coreStore } from '../';\nimport { Status } from './constants';\nimport useQuerySelect from './use-query-select';\n\ninterface GlobalResourcePermissionsResolution {\n\t/** Can the current user create new resources of this type? */\n\tcanCreate: boolean;\n}\ninterface SpecificResourcePermissionsResolution {\n\t/** Can the current user update resources of this type? */\n\tcanUpdate: boolean;\n\t/** Can the current user delete resources of this type? */\n\tcanDelete: boolean;\n}\ninterface ResolutionDetails {\n\t/** Resolution status */\n\tstatus: Status;\n\t/**\n\t * Is the data still being resolved?\n\t */\n\tisResolving: boolean;\n}\n\n/**\n * Is the data resolved by now?\n */\ntype HasResolved = boolean;\n\ntype ResourcePermissionsResolution< IdType > = [\n\tHasResolved,\n\tResolutionDetails &\n\t\tGlobalResourcePermissionsResolution &\n\t\t( IdType extends void ? SpecificResourcePermissionsResolution : {} )\n];\n\n/**\n * Resolves resource permissions.\n *\n * @param  resource The resource in question, e.g. media.\n * @param  id       ID of a specific resource entry, if needed, e.g. 10.\n *\n * @example\n * ```js\n * import { useResourcePermissions } from '@wordpress/core-data';\n *\n * function PagesList() {\n *   const { canCreate, isResolving } = useResourcePermissions( 'pages' );\n *\n *   if ( isResolving ) {\n *     return 'Loading ...';\n *   }\n *\n *   return (\n *     <div>\n *       {canCreate ? (<button>+ Create a new page</button>) : false}\n *       // ...\n *     </div>\n *   );\n * }\n *\n * // Rendered in the application:\n * // <PagesList />\n * ```\n *\n * @example\n * ```js\n * import { useResourcePermissions } from '@wordpress/core-data';\n *\n * function Page({ pageId }) {\n *   const {\n *     canCreate,\n *     canUpdate,\n *     canDelete,\n *     isResolving\n *   } = useResourcePermissions( 'pages', pageId );\n *\n *   if ( isResolving ) {\n *     return 'Loading ...';\n *   }\n *\n *   return (\n *     <div>\n *       {canCreate ? (<button>+ Create a new page</button>) : false}\n *       {canUpdate ? (<button>Edit page</button>) : false}\n *       {canDelete ? (<button>Delete page</button>) : false}\n *       // ...\n *     </div>\n *   );\n * }\n *\n * // Rendered in the application:\n * // <Page pageId={ 15 } />\n * ```\n *\n * In the above example, when `PagesList` is rendered into an\n * application, the appropriate permissions and the resolution details will be retrieved from\n * the store state using `canUser()`, or resolved if missing.\n *\n * @return Entity records data.\n * @template IdType\n */\nexport default function useResourcePermissions< IdType = void >(\n\tresource: string,\n\tid?: IdType\n): ResourcePermissionsResolution< IdType > {\n\treturn useQuerySelect(\n\t\t( resolve ) => {\n\t\t\tconst { canUser } = resolve( coreStore );\n\t\t\tconst create = canUser( 'create', resource );\n\t\t\tif ( ! id ) {\n\t\t\t\tconst read = canUser( 'read', resource );\n\n\t\t\t\tconst isResolving = create.isResolving || read.isResolving;\n\t\t\t\tconst hasResolved = create.hasResolved && read.hasResolved;\n\t\t\t\tlet status = Status.Idle;\n\t\t\t\tif ( isResolving ) {\n\t\t\t\t\tstatus = Status.Resolving;\n\t\t\t\t} else if ( hasResolved ) {\n\t\t\t\t\tstatus = Status.Success;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tstatus,\n\t\t\t\t\tisResolving,\n\t\t\t\t\thasResolved,\n\t\t\t\t\tcanCreate: create.hasResolved && create.data,\n\t\t\t\t\tcanRead: read.hasResolved && read.data,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst read = canUser( 'read', resource, id );\n\t\t\tconst update = canUser( 'update', resource, id );\n\t\t\tconst _delete = canUser( 'delete', resource, id );\n\t\t\tconst isResolving =\n\t\t\t\tread.isResolving ||\n\t\t\t\tcreate.isResolving ||\n\t\t\t\tupdate.isResolving ||\n\t\t\t\t_delete.isResolving;\n\t\t\tconst hasResolved =\n\t\t\t\tread.hasResolved &&\n\t\t\t\tcreate.hasResolved &&\n\t\t\t\tupdate.hasResolved &&\n\t\t\t\t_delete.hasResolved;\n\n\t\t\tlet status = Status.Idle;\n\t\t\tif ( isResolving ) {\n\t\t\t\tstatus = Status.Resolving;\n\t\t\t} else if ( hasResolved ) {\n\t\t\t\tstatus = Status.Success;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tstatus,\n\t\t\t\tisResolving,\n\t\t\t\thasResolved,\n\t\t\t\tcanRead: hasResolved && read.data,\n\t\t\t\tcanCreate: hasResolved && create.data,\n\t\t\t\tcanUpdate: hasResolved && update.data,\n\t\t\t\tcanDelete: hasResolved && _delete.data,\n\t\t\t};\n\t\t},\n\t\t[ resource, id ]\n\t);\n}\n\nexport function __experimentalUseResourcePermissions(\n\tresource: string,\n\tid?: unknown\n) {\n\tdeprecated( `wp.data.__experimentalUseResourcePermissions`, {\n\t\talternative: 'wp.data.useResourcePermissions',\n\t\tsince: '6.1',\n\t} );\n\treturn useResourcePermissions( resource, id );\n}\n","/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as selectors from './selectors';\nimport * as actions from './actions';\nimport * as resolvers from './resolvers';\nimport createLocksActions from './locks/actions';\nimport { rootEntitiesConfig, getMethodName } from './entities';\nimport { STORE_NAME } from './name';\n\n// The entity selectors/resolvers and actions are shortcuts to their generic equivalents\n// (getEntityRecord, getEntityRecords, updateEntityRecord, updateEntityRecords)\n// Instead of getEntityRecord, the consumer could use more user-friendly named selector: getPostType, getTaxonomy...\n// The \"kind\" and the \"name\" of the entity are combined to generate these shortcuts.\n\nconst entitySelectors = rootEntitiesConfig.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name ) ] = ( state, key, query ) =>\n\t\tselectors.getEntityRecord( state, kind, name, key, query );\n\tresult[ getMethodName( kind, name, 'get', true ) ] = ( state, query ) =>\n\t\tselectors.getEntityRecords( state, kind, name, query );\n\treturn result;\n}, {} );\n\nconst entityResolvers = rootEntitiesConfig.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name ) ] = ( key, query ) =>\n\t\tresolvers.getEntityRecord( kind, name, key, query );\n\tconst pluralMethodName = getMethodName( kind, name, 'get', true );\n\tresult[ pluralMethodName ] = ( ...args ) =>\n\t\tresolvers.getEntityRecords( kind, name, ...args );\n\tresult[ pluralMethodName ].shouldInvalidate = ( action ) =>\n\t\tresolvers.getEntityRecords.shouldInvalidate( action, kind, name );\n\treturn result;\n}, {} );\n\nconst entityActions = rootEntitiesConfig.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name, 'save' ) ] = ( key ) =>\n\t\tactions.saveEntityRecord( kind, name, key );\n\tresult[ getMethodName( kind, name, 'delete' ) ] = ( key, query ) =>\n\t\tactions.deleteEntityRecord( kind, name, key, query );\n\treturn result;\n}, {} );\n\nconst storeConfig = () => ( {\n\treducer,\n\tactions: { ...actions, ...entityActions, ...createLocksActions() },\n\tselectors: { ...selectors, ...entitySelectors },\n\tresolvers: { ...resolvers, ...entityResolvers },\n} );\n\n/**\n * Store definition for the code data namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, storeConfig() );\n\nregister( store );\n\nexport { default as EntityProvider } from './entity-provider';\nexport * from './entity-provider';\nexport * from './entity-types';\nexport * from './fetch';\nexport * from './hooks';\n","/**\n * Internal dependencies\n */\nimport createLocks from './engine';\n\nexport default function createLocksActions() {\n\tconst locks = createLocks();\n\n\tfunction __unstableAcquireStoreLock( store, path, { exclusive } ) {\n\t\treturn () => locks.acquire( store, path, exclusive );\n\t}\n\n\tfunction __unstableReleaseStoreLock( lock ) {\n\t\treturn () => locks.release( lock );\n\t}\n\n\treturn { __unstableAcquireStoreLock, __unstableReleaseStoreLock };\n}\n"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","getValuePair","instance","_map","_arrayTreeMap","_objectTreeMap","has","get","properties","keys","sort","map","Array","isArray","property","undefined","propertyValue","valuePair","delete","set","EquivalentKeyMap","iterable","Constructor","TypeError","_classCallCheck","this","clear","iterablePairs","forEach","value","push","protoProps","previousValuePair","callback","_this","thisArg","arguments","call","Map","size","module","exports","fn","options","head","tail","memoized","args","node","len","searchCache","next","prev","val","apply","maxSize","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","o","prop","hasOwnProperty","r","toStringTag","window","isMatch","reducer","state","action","replacer","conservativeMapItem","item","nextItem","hasChanges","result","isEqual","actionProperty","nextKeyState","__assign","assign","t","s","p","lowerCase","str","toLowerCase","create","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","noCase","input","splitRegexp","stripRegexp","transform","delimiter","replace","start","end","charAt","slice","split","join","re","RegExp","reduce","capitalCaseTransform","toUpperCase","substr","upperCaseFirst","pascalCaseTransform","index","firstChar","lowerChars","pascalCase","getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","rng","Error","uuid","byteToHex","toString","buf","offset","rnds","random","arr","receiveItems","items","edits","type","castArray","persistedEdits","removeItems","kind","name","records","invalidateCache","itemIds","receiveQueriedItems","query","maxItems","async","defaultProcessor","requests","preflightResponse","apiFetch","path","method","endpoints","results","batchRequests","chunkSize","tmp","cache","splice","chunk","batchResponse","data","validation","request","body","headers","batchResults","failed","responses","response","error","status","output","ObservableSet","Set","subscribers","add","subscriber","isSuccess","subscribe","STORE_NAME","receiveUserQuery","queryID","users","receiveCurrentUser","currentUser","addEntities","entities","receiveEntityRecords","record","title","receiveCurrentTheme","currentTheme","__experimentalReceiveCurrentGlobalStylesId","currentGlobalStylesId","id","__experimentalReceiveThemeBaseGlobalStyles","stylesheet","globalStyles","__experimentalReceiveThemeGlobalStyleVariations","variations","receiveThemeSupports","deprecated","since","receiveEmbedPreview","url","preview","deleteEntityRecord","recordId","__unstableFetch","throwOnError","dispatch","configs","getOrLoadEntitiesConfig","entityConfig","find","deletedRecord","__experimentalNoFetch","lock","__unstableAcquireStoreLock","exclusive","hasError","baseURL","addQueryArgs","_error","__unstableReleaseStoreLock","editEntityRecord","select","getEntityConfig","transientEdits","mergedEdits","getRawEntityRecord","editedRecord","getEditedEntityRecord","edit","acc","recordValue","editedRecordValue","meta","undo","undoIgnore","undoEdit","getUndoEdit","isUndo","redo","redoEdit","getRedoEdit","isRedo","__unstableCreateUndoLevel","saveEntityRecord","isAutosave","resolveSelect","entityIdKey","DEFAULT_ENTITY_KEY","entries","evaluatedValue","updatedRecord","persistedRecord","getCurrentUser","currentUserId","autosavePost","getAutosave","includes","newRecord","receiveAutosaves","__unstablePrePersist","__experimentalBatch","batch","processor","lastId","queue","pending","inputOrThunk","Promise","resolve","reject","finally","unsubscribe","queueItem","createBatch","api","saveEditedEntityRecord","resultPromises","all","run","hasEditsForEntityRecord","getEntityRecordNonTransientEdits","__experimentalSaveSpecifiedEntityEdits","itemsToSave","editsToSave","some","receiveUploadPermissions","hasUploadPermissions","alternative","receiveUserPermission","isAllowed","postId","autosaves","POST_RAW_ATTRIBUTES","attachmentConfig","baseURLParams","context","plural","label","__","rawAttributes","siteConfig","getTitle","postTypeConfig","taxonomyConfig","sidebarConfig","blocks","widgetConfig","widgetTypeConfig","userConfig","commentConfig","menuConfig","menuItemConfig","menuLocationConfig","globalStyleConfig","rendered","themeConfig","pluginConfig","rootEntitiesConfig","_fields","additionalEntityConfigLoaders","loadEntities","postTypes","postType","isTemplate","rest_namespace","rest_base","selection","slug","String","prePersistPostType","__unstable_rest_base","taxonomies","taxonomy","newEdits","getMethodName","prefix","usePlural","kindPrefix","nameSuffix","suffix","getEntitiesConfig","loader","WeakMap","parts","stableKey","page","perPage","fields","include","Number","getNormalizedCommaSeparable","getContextFromAction","getQueryParts","getMergedItemIds","nextItemIds","nextItemIdsStartIndex","Math","max","mergedItemIds","isInNextItemsRange","receiveQueries","flowRight","ifMatchingAction","replaceAction","onSubKey","combineReducers","accumulator","itemId","mapValues","contextState","omit","itemIsComplete","queryParts","isCompleteQuery","queries","removedItems","contextQueries","queryItems","filter","queryId","entity","queriedData","queriedDataReducer","nextState","nextEdits","saving","deleting","entitiesConfig","UNDO_INITIAL_STATE","lastEditAction","terms","byId","newUsers","user","themeGlobalStyleVariations","themeBaseGlobalStyles","newConfig","config","entitiesDataReducer","entitiesByKind","groupBy","memo","subEntities","kindReducer","kindMemo","newData","isCreateUndoLevel","isUndoOrRedo","flattenedUndo","pop","comparisonUndoEdits","values","comparisonEdits","isShallowEqual","embedPreviews","userPermissions","autosavesData","blockPatterns","patterns","blockPatternCategories","categories","LEAF_KEY","arrayOf","b","fromIndex","selector","getDependants","rootCache","normalizedGetDependants","getCache","dependants","dependant","caches","isUniqueByDependants","createCache","callSelector","lastDependants","queriedItemsCacheByState","getQueriedItemsUncached","startOffset","endOffset","min","filteredItem","f","field","getQueriedItems","createSelector","queriedItemsCache","queriedItems","EMPTY_OBJECT","isRequestingEmbedPreview","createRegistrySelector","isResolving","getAuthors","getUserQueryResults","queryResults","getEntitiesByKind","getEntity","getEntityRecord","queriedState","__experimentalGetEntityRecordNoResolver","_key","attribute","isRawAttribute","hasEntityRecords","getEntityRecords","__experimentalGetDirtyEntityRecords","dirtyRecords","primaryKeys","primaryKey","entityRecord","__experimentalGetEntitiesBeingSaved","recordsBeingSaved","isSavingEntityRecord","getEntityRecordEdits","isAutosavingEntityRecord","Boolean","isDeletingEntityRecord","getLastEntitySaveError","getLastEntityDeleteError","getCurrentUndoOffset","hasUndo","hasRedo","getCurrentTheme","__experimentalGetCurrentGlobalStylesId","getThemeSupports","theme_supports","getEmbedPreview","isPreviewEmbedFallback","oEmbedLinkCheck","html","canUser","resource","canUserEditEntityRecord","getAutosaves","authorId","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","__experimentalGetTemplateForLink","link","template","__experimentalGetCurrentThemeBaseGlobalStyles","__experimentalGetCurrentThemeGlobalStylesVariations","getBlockPatterns","getBlockPatternCategories","camelCaseTransform","resolverName","forwardResolver","resolutionsArgs","selectorName","shouldInvalidate","activeThemes","embedProxyResponse","read","update","parse","allowHeader","allow","restBase","restNamespace","getPostType","fetch","then","res","json","e","globalStylesURL","_links","href","globalStylesObject","themeGlobalStyles","restPatterns","pattern","fromEntries","deepCopyLocksTreePath","tree","newTree","currentNode","branchName","children","locks","getNode","nextNode","hasConflictingLock","DEFAULT_STATE","store","storePath","l","isLockAvailable","iteratePath","descendant","stack","childNode","iterateDescendants","createLocks","processPendingLockRequests","getPendingLockRequests","notifyAcquired","acquire","release","EMPTY_ARRAY","entityContexts","createContext","getEntityContext","EntityProvider","Provider","useEntityId","useContext","useEntityProp","_id","providerId","fullValue","useSelect","useDispatch","useCallback","newValue","useEntityBlockEditor","content","useEffect","parsedContent","onChange","newBlocks","blocksForSerialization","__unstableSerializeAndClean","onInput","search","searchOptions","settings","isInitialSuggestions","subtype","disablePostFormats","per_page","catch","current","concat","isMedia","source_url","decodeEntities","CACHE","endpoint","prependHTTP","isURL","protocol","getProtocol","isValidProtocol","startsWith","test","Status","META_SELECTORS","__experimentalUseQuerySelect","mapQuerySelect","deps","registry","enrichSelectors","memoize","selectors","resolvers","getIsResolving","hasResolved","Resolving","Success","Idle","useEntityRecord","enabled","coreStore","mutations","useMemo","save","saveOptions","hasEdits","querySelectRest","useQuerySelect","__experimentalUseEntityRecord","useEntityRecords","queryArgs","queryAsString","rest","__experimentalUseEntityRecords","useResourcePermissions","canCreate","canRead","_delete","canUpdate","canDelete","__experimentalUseResourcePermissions","entitySelectors","entityResolvers","pluralMethodName","entityActions","actions","createReduxStore","createLocksActions","register"],"sourceRoot":""}